
STM32F407-MODBUS-OVER-ETH-SPI-SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d58  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002ee8  08002ee8  00003ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f60  08002f60  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002f60  08002f60  00003f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f68  08002f68  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f68  08002f68  00003f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f6c  08002f6c  00003f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002f70  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          00000208  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000264  20000264  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000072dd  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000188e  00000000  00000000  0000b369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  0000cbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000544  00000000  00000000  0000d300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203fe  00000000  00000000  0000d844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008bdd  00000000  00000000  0002dc42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c24e1  00000000  00000000  0003681f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f8d00  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020a0  00000000  00000000  000f8d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  000fade4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002ed0 	.word	0x08002ed0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08002ed0 	.word	0x08002ed0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fbf4 	bl	8000d8c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f808 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f896 	bl	80006d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005ac:	f000 f862 	bl	8000674 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SPI_Slave_Init();
 80005b0:	f000 fa32 	bl	8000a18 <SPI_Slave_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <main+0x18>

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	@ 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	@ 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 ffde 	bl	8002588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b22      	ldr	r3, [pc, #136]	@ (800066c <SystemClock_Config+0xb4>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e4:	4a21      	ldr	r2, [pc, #132]	@ (800066c <SystemClock_Config+0xb4>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ec:	4b1f      	ldr	r3, [pc, #124]	@ (800066c <SystemClock_Config+0xb4>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <SystemClock_Config+0xb8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a1b      	ldr	r2, [pc, #108]	@ (8000670 <SystemClock_Config+0xb8>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <SystemClock_Config+0xb8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000620:	2300      	movs	r3, #0
 8000622:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f000 ff0b 	bl	8001444 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000634:	f000 f8a2 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f001 f96e 	bl	8001934 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800065e:	f000 f88d 	bl	800077c <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	@ 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000678:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <MX_SPI1_Init+0x5c>)
 800067a:	4a16      	ldr	r2, [pc, #88]	@ (80006d4 <MX_SPI1_Init+0x60>)
 800067c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800067e:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_SPI1_Init+0x5c>)
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_SPI1_Init+0x5c>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800068a:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_SPI1_Init+0x5c>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_SPI1_Init+0x5c>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_SPI1_Init+0x5c>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <MX_SPI1_Init+0x5c>)
 800069e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	@ (80006d0 <MX_SPI1_Init+0x5c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <MX_SPI1_Init+0x5c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	@ (80006d0 <MX_SPI1_Init+0x5c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006b6:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <MX_SPI1_Init+0x5c>)
 80006b8:	220a      	movs	r2, #10
 80006ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <MX_SPI1_Init+0x5c>)
 80006be:	f001 fae5 	bl	8001c8c <HAL_SPI_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80006c8:	f000 f858 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000078 	.word	0x20000078
 80006d4:	40013000 	.word	0x40013000

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <MX_GPIO_Init+0x98>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000770 <MX_GPIO_Init+0x98>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <MX_GPIO_Init+0x98>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <MX_GPIO_Init+0x98>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a17      	ldr	r2, [pc, #92]	@ (8000770 <MX_GPIO_Init+0x98>)
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <MX_GPIO_Init+0x98>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800072c:	4811      	ldr	r0, [pc, #68]	@ (8000774 <MX_GPIO_Init+0x9c>)
 800072e:	f000 fe6f 	bl	8001410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000732:	2310      	movs	r3, #16
 8000734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	4619      	mov	r1, r3
 8000744:	480c      	ldr	r0, [pc, #48]	@ (8000778 <MX_GPIO_Init+0xa0>)
 8000746:	f000 fcc7 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800074a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800074e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4619      	mov	r1, r3
 8000762:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_GPIO_Init+0x9c>)
 8000764:	f000 fcb8 	bl	80010d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000768:	bf00      	nop
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40020c00 	.word	0x40020c00
 8000778:	40020000 	.word	0x40020000

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <Error_Handler+0x8>

08000788 <LED_SetState>:

/* ----------------------------------------------------------------
 * LED Control Functions
 * ----------------------------------------------------------------*/

static void LED_SetState(uint8_t index, uint8_t state) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
    if (index >= 4) return;
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d83e      	bhi.n	800081c <LED_SetState+0x94>

    GPIO_PinState pinState = state ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	bf14      	ite	ne
 80007a4:	2301      	movne	r3, #1
 80007a6:	2300      	moveq	r3, #0
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	73fb      	strb	r3, [r7, #15]
    ledStates[index] = state ? 1 : 0;
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	bf14      	ite	ne
 80007b2:	2301      	movne	r3, #1
 80007b4:	2300      	moveq	r3, #0
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a19      	ldr	r2, [pc, #100]	@ (8000824 <LED_SetState+0x9c>)
 80007be:	54d1      	strb	r1, [r2, r3]

    switch (index) {
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	2b03      	cmp	r3, #3
 80007c4:	d82b      	bhi.n	800081e <LED_SetState+0x96>
 80007c6:	a201      	add	r2, pc, #4	@ (adr r2, 80007cc <LED_SetState+0x44>)
 80007c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007cc:	080007dd 	.word	0x080007dd
 80007d0:	080007ed 	.word	0x080007ed
 80007d4:	080007fd 	.word	0x080007fd
 80007d8:	0800080d 	.word	0x0800080d
        case 0: HAL_GPIO_WritePin(LED_PORT, LED_GREEN_PIN, pinState); break;
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	461a      	mov	r2, r3
 80007e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007e4:	4810      	ldr	r0, [pc, #64]	@ (8000828 <LED_SetState+0xa0>)
 80007e6:	f000 fe13 	bl	8001410 <HAL_GPIO_WritePin>
 80007ea:	e018      	b.n	800081e <LED_SetState+0x96>
        case 1: HAL_GPIO_WritePin(LED_PORT, LED_ORANGE_PIN, pinState); break;
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	461a      	mov	r2, r3
 80007f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f4:	480c      	ldr	r0, [pc, #48]	@ (8000828 <LED_SetState+0xa0>)
 80007f6:	f000 fe0b 	bl	8001410 <HAL_GPIO_WritePin>
 80007fa:	e010      	b.n	800081e <LED_SetState+0x96>
        case 2: HAL_GPIO_WritePin(LED_PORT, LED_RED_PIN, pinState); break;
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	461a      	mov	r2, r3
 8000800:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000804:	4808      	ldr	r0, [pc, #32]	@ (8000828 <LED_SetState+0xa0>)
 8000806:	f000 fe03 	bl	8001410 <HAL_GPIO_WritePin>
 800080a:	e008      	b.n	800081e <LED_SetState+0x96>
        case 3: HAL_GPIO_WritePin(LED_PORT, LED_BLUE_PIN, pinState); break;
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	461a      	mov	r2, r3
 8000810:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <LED_SetState+0xa0>)
 8000816:	f000 fdfb 	bl	8001410 <HAL_GPIO_WritePin>
 800081a:	e000      	b.n	800081e <LED_SetState+0x96>
    if (index >= 4) return;
 800081c:	bf00      	nop
    }
}
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000110 	.word	0x20000110
 8000828:	40020c00 	.word	0x40020c00

0800082c <LED_SetAll>:

static void LED_SetAll(uint8_t state) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 4; i++) {
 8000836:	2300      	movs	r3, #0
 8000838:	73fb      	strb	r3, [r7, #15]
 800083a:	e008      	b.n	800084e <LED_SetAll+0x22>
        LED_SetState(i, state);
 800083c:	79fa      	ldrb	r2, [r7, #7]
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffa0 	bl	8000788 <LED_SetState>
    for (uint8_t i = 0; i < 4; i++) {
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	3301      	adds	r3, #1
 800084c:	73fb      	strb	r3, [r7, #15]
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d9f3      	bls.n	800083c <LED_SetAll+0x10>
    }
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <ProcessCommand>:

/* ----------------------------------------------------------------
 * Command Parser
 * ----------------------------------------------------------------*/

static void ProcessCommand(const char *cmdRaw, char *response) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b090      	sub	sp, #64	@ 0x40
 8000864:	af04      	add	r7, sp, #16
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
    char cmd[BUFFER_SIZE];
    size_t i = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Copy until newline or buffer end */
    while (i < BUFFER_SIZE - 1 && cmdRaw[i] != '\n' && cmdRaw[i] != '\0') {
 800086e:	e00c      	b.n	800088a <ProcessCommand+0x2a>
        cmd[i] = cmdRaw[i];
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000874:	4413      	add	r3, r2
 8000876:	7819      	ldrb	r1, [r3, #0]
 8000878:	f107 0208 	add.w	r2, r7, #8
 800087c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800087e:	4413      	add	r3, r2
 8000880:	460a      	mov	r2, r1
 8000882:	701a      	strb	r2, [r3, #0]
        i++;
 8000884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000886:	3301      	adds	r3, #1
 8000888:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (i < BUFFER_SIZE - 1 && cmdRaw[i] != '\n' && cmdRaw[i] != '\0') {
 800088a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800088c:	2b1e      	cmp	r3, #30
 800088e:	d80b      	bhi.n	80008a8 <ProcessCommand+0x48>
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b0a      	cmp	r3, #10
 800089a:	d005      	beq.n	80008a8 <ProcessCommand+0x48>
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008a0:	4413      	add	r3, r2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1e3      	bne.n	8000870 <ProcessCommand+0x10>
    }
    cmd[i] = '\0';  // ensure null-terminated
 80008a8:	f107 0208 	add.w	r2, r7, #8
 80008ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ae:	4413      	add	r3, r2
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
//        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14); // Debug LED: short command
//        return;
//    }

    /* LED command: LED:X# */
    if (strncmp(cmd, "LED:", 4) == 0) {
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	2204      	movs	r2, #4
 80008ba:	4952      	ldr	r1, [pc, #328]	@ (8000a04 <ProcessCommand+0x1a4>)
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fe6b 	bl	8002598 <strncmp>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d179      	bne.n	80009bc <ProcessCommand+0x15c>

        char color = cmd[4];
 80008c8:	7b3b      	ldrb	r3, [r7, #12]
 80008ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        char state = cmd[5];
 80008ce:	7b7b      	ldrb	r3, [r7, #13]
 80008d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

        if (state != '0' && state != '1') return;
 80008d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80008d8:	2b30      	cmp	r3, #48	@ 0x30
 80008da:	d004      	beq.n	80008e6 <ProcessCommand+0x86>
 80008dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80008e0:	2b31      	cmp	r3, #49	@ 0x31
 80008e2:	f040 808a 	bne.w	80009fa <ProcessCommand+0x19a>
        uint8_t stateVal = (state == '1') ? 1 : 0;
 80008e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80008ea:	2b31      	cmp	r3, #49	@ 0x31
 80008ec:	bf0c      	ite	eq
 80008ee:	2301      	moveq	r3, #1
 80008f0:	2300      	movne	r3, #0
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

        switch (color) {
 80008f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80008fc:	3b41      	subs	r3, #65	@ 0x41
 80008fe:	2b11      	cmp	r3, #17
 8000900:	d87c      	bhi.n	80009fc <ProcessCommand+0x19c>
 8000902:	a201      	add	r2, pc, #4	@ (adr r2, 8000908 <ProcessCommand+0xa8>)
 8000904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000908:	080009a9 	.word	0x080009a9
 800090c:	08000993 	.word	0x08000993
 8000910:	080009fd 	.word	0x080009fd
 8000914:	080009fd 	.word	0x080009fd
 8000918:	080009fd 	.word	0x080009fd
 800091c:	080009fd 	.word	0x080009fd
 8000920:	08000951 	.word	0x08000951
 8000924:	080009fd 	.word	0x080009fd
 8000928:	080009fd 	.word	0x080009fd
 800092c:	080009fd 	.word	0x080009fd
 8000930:	080009fd 	.word	0x080009fd
 8000934:	080009fd 	.word	0x080009fd
 8000938:	080009fd 	.word	0x080009fd
 800093c:	080009fd 	.word	0x080009fd
 8000940:	08000967 	.word	0x08000967
 8000944:	080009fd 	.word	0x080009fd
 8000948:	080009fd 	.word	0x080009fd
 800094c:	0800097d 	.word	0x0800097d
            case 'G': LED_SetState(0, stateVal); strcpy(response, "OK\n"); break;
 8000950:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000954:	4619      	mov	r1, r3
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff ff16 	bl	8000788 <LED_SetState>
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	4a2a      	ldr	r2, [pc, #168]	@ (8000a08 <ProcessCommand+0x1a8>)
 8000960:	6810      	ldr	r0, [r2, #0]
 8000962:	6018      	str	r0, [r3, #0]
 8000964:	e04a      	b.n	80009fc <ProcessCommand+0x19c>
            case 'O': LED_SetState(1, stateVal); strcpy(response, "OK\n"); break;
 8000966:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800096a:	4619      	mov	r1, r3
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff ff0b 	bl	8000788 <LED_SetState>
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	4a24      	ldr	r2, [pc, #144]	@ (8000a08 <ProcessCommand+0x1a8>)
 8000976:	6810      	ldr	r0, [r2, #0]
 8000978:	6018      	str	r0, [r3, #0]
 800097a:	e03f      	b.n	80009fc <ProcessCommand+0x19c>
            case 'R': LED_SetState(2, stateVal); strcpy(response, "OK\n"); break;
 800097c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000980:	4619      	mov	r1, r3
 8000982:	2002      	movs	r0, #2
 8000984:	f7ff ff00 	bl	8000788 <LED_SetState>
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	4a1f      	ldr	r2, [pc, #124]	@ (8000a08 <ProcessCommand+0x1a8>)
 800098c:	6810      	ldr	r0, [r2, #0]
 800098e:	6018      	str	r0, [r3, #0]
 8000990:	e034      	b.n	80009fc <ProcessCommand+0x19c>
            case 'B': LED_SetState(3, stateVal); strcpy(response, "OK\n"); break;
 8000992:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000996:	4619      	mov	r1, r3
 8000998:	2003      	movs	r0, #3
 800099a:	f7ff fef5 	bl	8000788 <LED_SetState>
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	4a19      	ldr	r2, [pc, #100]	@ (8000a08 <ProcessCommand+0x1a8>)
 80009a2:	6810      	ldr	r0, [r2, #0]
 80009a4:	6018      	str	r0, [r3, #0]
 80009a6:	e029      	b.n	80009fc <ProcessCommand+0x19c>
            case 'A': LED_SetAll(stateVal);       strcpy(response, "OK\n"); break;
 80009a8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff3d 	bl	800082c <LED_SetAll>
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	4a14      	ldr	r2, [pc, #80]	@ (8000a08 <ProcessCommand+0x1a8>)
 80009b6:	6810      	ldr	r0, [r2, #0]
 80009b8:	6018      	str	r0, [r3, #0]
 80009ba:	e01f      	b.n	80009fc <ProcessCommand+0x19c>
        }
    }
    /* GET command: GET:LED */
    else if (strncmp(cmd, "GET:LED", 7) == 0) {
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	2207      	movs	r2, #7
 80009c2:	4912      	ldr	r1, [pc, #72]	@ (8000a0c <ProcessCommand+0x1ac>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fde7 	bl	8002598 <strncmp>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d115      	bne.n	80009fc <ProcessCommand+0x19c>
        snprintf(response, BUFFER_SIZE, "STA:%d%d%d%d\n",
                 ledStates[0], ledStates[1], ledStates[2], ledStates[3]);
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <ProcessCommand+0x1b0>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
        snprintf(response, BUFFER_SIZE, "STA:%d%d%d%d\n",
 80009d4:	4618      	mov	r0, r3
                 ledStates[0], ledStates[1], ledStates[2], ledStates[3]);
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <ProcessCommand+0x1b0>)
 80009d8:	785b      	ldrb	r3, [r3, #1]
        snprintf(response, BUFFER_SIZE, "STA:%d%d%d%d\n",
 80009da:	461a      	mov	r2, r3
                 ledStates[0], ledStates[1], ledStates[2], ledStates[3]);
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <ProcessCommand+0x1b0>)
 80009de:	789b      	ldrb	r3, [r3, #2]
        snprintf(response, BUFFER_SIZE, "STA:%d%d%d%d\n",
 80009e0:	4619      	mov	r1, r3
                 ledStates[0], ledStates[1], ledStates[2], ledStates[3]);
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <ProcessCommand+0x1b0>)
 80009e4:	78db      	ldrb	r3, [r3, #3]
        snprintf(response, BUFFER_SIZE, "STA:%d%d%d%d\n",
 80009e6:	9302      	str	r3, [sp, #8]
 80009e8:	9101      	str	r1, [sp, #4]
 80009ea:	9200      	str	r2, [sp, #0]
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a09      	ldr	r2, [pc, #36]	@ (8000a14 <ProcessCommand+0x1b4>)
 80009f0:	2120      	movs	r1, #32
 80009f2:	6838      	ldr	r0, [r7, #0]
 80009f4:	f001 fd92 	bl	800251c <sniprintf>
 80009f8:	e000      	b.n	80009fc <ProcessCommand+0x19c>
        if (state != '0' && state != '1') return;
 80009fa:	bf00      	nop
    }
}
 80009fc:	3730      	adds	r7, #48	@ 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	08002ee8 	.word	0x08002ee8
 8000a08:	08002ef0 	.word	0x08002ef0
 8000a0c:	08002ef4 	.word	0x08002ef4
 8000a10:	20000110 	.word	0x20000110
 8000a14:	08002efc 	.word	0x08002efc

08000a18 <SPI_Slave_Init>:

/* ----------------------------------------------------------------
 * SPI Communication (Interrupt-driven)
 * ----------------------------------------------------------------*/

void SPI_Slave_Init(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    /* Initialize all LEDs to OFF */
    LED_SetAll(0);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff ff05 	bl	800082c <LED_SetAll>

    /* Prepare for first SPI reception */
    memset(rxBuffer, 0, BUFFER_SIZE);
 8000a22:	2220      	movs	r2, #32
 8000a24:	2100      	movs	r1, #0
 8000a26:	480b      	ldr	r0, [pc, #44]	@ (8000a54 <SPI_Slave_Init+0x3c>)
 8000a28:	f001 fdae 	bl	8002588 <memset>
    memset(txBuffer, 0, BUFFER_SIZE);
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <SPI_Slave_Init+0x40>)
 8000a32:	f001 fda9 	bl	8002588 <memset>
    strcpy((char *)txBuffer, "RDY\n"); // Ready message
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <SPI_Slave_Init+0x40>)
 8000a38:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <SPI_Slave_Init+0x44>)
 8000a3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a3e:	6018      	str	r0, [r3, #0]
 8000a40:	3304      	adds	r3, #4
 8000a42:	7019      	strb	r1, [r3, #0]

    /* Start SPI in interrupt mode */
    HAL_SPI_TransmitReceive_IT(&hspi1, txBuffer, rxBuffer, BUFFER_SIZE);
 8000a44:	2320      	movs	r3, #32
 8000a46:	4a03      	ldr	r2, [pc, #12]	@ (8000a54 <SPI_Slave_Init+0x3c>)
 8000a48:	4903      	ldr	r1, [pc, #12]	@ (8000a58 <SPI_Slave_Init+0x40>)
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <SPI_Slave_Init+0x48>)
 8000a4c:	f001 f9a8 	bl	8001da0 <HAL_SPI_TransmitReceive_IT>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200000d0 	.word	0x200000d0
 8000a58:	200000f0 	.word	0x200000f0
 8000a5c:	08002f0c 	.word	0x08002f0c
 8000a60:	20000078 	.word	0x20000078

08000a64 <HAL_SPI_TxRxCpltCallback>:

/* HAL SPI Transfer Complete Callback */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	@ 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == hspi1.Instance) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <HAL_SPI_TxRxCpltCallback+0x74>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d12b      	bne.n	8000ad0 <HAL_SPI_TxRxCpltCallback+0x6c>
        /* Prepare clean response buffer */
        char response[BUFFER_SIZE] = {0};
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	2220      	movs	r2, #32
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fd81 	bl	8002588 <memset>
        strcpy(response, "ERR\n");   // default in case command is invalid
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	4a14      	ldr	r2, [pc, #80]	@ (8000adc <HAL_SPI_TxRxCpltCallback+0x78>)
 8000a8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a90:	6018      	str	r0, [r3, #0]
 8000a92:	3304      	adds	r3, #4
 8000a94:	7019      	strb	r1, [r3, #0]

        /* Process received command */
        ProcessCommand((char *)rxBuffer, response);
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4810      	ldr	r0, [pc, #64]	@ (8000ae0 <HAL_SPI_TxRxCpltCallback+0x7c>)
 8000a9e:	f7ff fedf 	bl	8000860 <ProcessCommand>

        /* Prepare response for next transaction */
        memset(txBuffer, 0, BUFFER_SIZE);
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	480f      	ldr	r0, [pc, #60]	@ (8000ae4 <HAL_SPI_TxRxCpltCallback+0x80>)
 8000aa8:	f001 fd6e 	bl	8002588 <memset>
        strncpy((char *)txBuffer, response, BUFFER_SIZE - 1);
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	221f      	movs	r2, #31
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480b      	ldr	r0, [pc, #44]	@ (8000ae4 <HAL_SPI_TxRxCpltCallback+0x80>)
 8000ab6:	f001 fd81 	bl	80025bc <strncpy>

        /* Clear RX buffer */
        memset(rxBuffer, 0, BUFFER_SIZE);
 8000aba:	2220      	movs	r2, #32
 8000abc:	2100      	movs	r1, #0
 8000abe:	4808      	ldr	r0, [pc, #32]	@ (8000ae0 <HAL_SPI_TxRxCpltCallback+0x7c>)
 8000ac0:	f001 fd62 	bl	8002588 <memset>

        /* Ready for next transaction */
        HAL_SPI_TransmitReceive_IT(&hspi1, txBuffer, rxBuffer, BUFFER_SIZE);
 8000ac4:	2320      	movs	r3, #32
 8000ac6:	4a06      	ldr	r2, [pc, #24]	@ (8000ae0 <HAL_SPI_TxRxCpltCallback+0x7c>)
 8000ac8:	4906      	ldr	r1, [pc, #24]	@ (8000ae4 <HAL_SPI_TxRxCpltCallback+0x80>)
 8000aca:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <HAL_SPI_TxRxCpltCallback+0x74>)
 8000acc:	f001 f968 	bl	8001da0 <HAL_SPI_TransmitReceive_IT>
    }
}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000078 	.word	0x20000078
 8000adc:	08002f14 	.word	0x08002f14
 8000ae0:	200000d0 	.word	0x200000d0
 8000ae4:	200000f0 	.word	0x200000f0

08000ae8 <HAL_SPI_ErrorCallback>:

/* HAL SPI Error Callback */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == hspi1.Instance) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <HAL_SPI_ErrorCallback+0x4c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d116      	bne.n	8000b2a <HAL_SPI_ErrorCallback+0x42>
        /* Restart SPI communication on error */
        memset(rxBuffer, 0, BUFFER_SIZE);
 8000afc:	2220      	movs	r2, #32
 8000afe:	2100      	movs	r1, #0
 8000b00:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <HAL_SPI_ErrorCallback+0x50>)
 8000b02:	f001 fd41 	bl	8002588 <memset>
        memset(txBuffer, 0, BUFFER_SIZE);
 8000b06:	2220      	movs	r2, #32
 8000b08:	2100      	movs	r1, #0
 8000b0a:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <HAL_SPI_ErrorCallback+0x54>)
 8000b0c:	f001 fd3c 	bl	8002588 <memset>
        strcpy((char *)txBuffer, "ERR\n");
 8000b10:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <HAL_SPI_ErrorCallback+0x54>)
 8000b12:	4a0b      	ldr	r2, [pc, #44]	@ (8000b40 <HAL_SPI_ErrorCallback+0x58>)
 8000b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b18:	6018      	str	r0, [r3, #0]
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	7019      	strb	r1, [r3, #0]
        HAL_SPI_TransmitReceive_IT(&hspi1, txBuffer, rxBuffer, BUFFER_SIZE);
 8000b1e:	2320      	movs	r3, #32
 8000b20:	4a05      	ldr	r2, [pc, #20]	@ (8000b38 <HAL_SPI_ErrorCallback+0x50>)
 8000b22:	4906      	ldr	r1, [pc, #24]	@ (8000b3c <HAL_SPI_ErrorCallback+0x54>)
 8000b24:	4803      	ldr	r0, [pc, #12]	@ (8000b34 <HAL_SPI_ErrorCallback+0x4c>)
 8000b26:	f001 f93b 	bl	8001da0 <HAL_SPI_TransmitReceive_IT>
    }
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000078 	.word	0x20000078
 8000b38:	200000d0 	.word	0x200000d0
 8000b3c:	200000f0 	.word	0x200000f0
 8000b40:	08002f14 	.word	0x08002f14

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	4a0f      	ldr	r2, [pc, #60]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c28 <HAL_SPI_MspInit+0x94>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d133      	bne.n	8000c1e <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <HAL_SPI_MspInit+0x98>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8000c2c <HAL_SPI_MspInit+0x98>)
 8000bc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc6:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <HAL_SPI_MspInit+0x98>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <HAL_SPI_MspInit+0x98>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a14      	ldr	r2, [pc, #80]	@ (8000c2c <HAL_SPI_MspInit+0x98>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <HAL_SPI_MspInit+0x98>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bee:	23e0      	movs	r3, #224	@ 0xe0
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bfe:	2305      	movs	r3, #5
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4809      	ldr	r0, [pc, #36]	@ (8000c30 <HAL_SPI_MspInit+0x9c>)
 8000c0a:	f000 fa65 	bl	80010d8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2023      	movs	r0, #35	@ 0x23
 8000c14:	f000 fa07 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c18:	2023      	movs	r0, #35	@ 0x23
 8000c1a:	f000 fa20 	bl	800105e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	@ 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40013000 	.word	0x40013000
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <NMI_Handler+0x4>

08000c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8a:	f000 f8d1 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <SPI1_IRQHandler+0x10>)
 8000c9a:	f001 f90f 	bl	8001ebc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000078 	.word	0x20000078

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f001 fc84 	bl	80025e4 <__errno>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20020000 	.word	0x20020000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	20000114 	.word	0x20000114
 8000d10:	20000268 	.word	0x20000268

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d3c:	f7ff ffea 	bl	8000d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	@ (8000d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d66:	f001 fc43 	bl	80025f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fc17 	bl	800059c <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d7c:	08002f70 	.word	0x08002f70
  ldr r2, =_sbss
 8000d80:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d84:	20000264 	.word	0x20000264

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f92b 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	200f      	movs	r0, #15
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fec0 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f943 	bl	800107a <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f000 f90b 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	@ (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000118 	.word	0x20000118

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000118 	.word	0x20000118

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	@ (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db0b      	blt.n	8000efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 021f 	and.w	r2, r3, #31
 8000eec:	4907      	ldr	r1, [pc, #28]	@ (8000f0c <__NVIC_EnableIRQ+0x38>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	@ (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	@ (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	@ 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f7ff ff8e 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	@ (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff29 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff3e 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff8e 	bl	8000f64 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5d 	bl	8000f10 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff31 	bl	8000ed4 <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa2 	bl	8000fcc <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d004      	beq.n	80010b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2280      	movs	r2, #128	@ 0x80
 80010aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e00c      	b.n	80010ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2205      	movs	r2, #5
 80010b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0201 	bic.w	r2, r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	@ 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	e16b      	b.n	80013cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f4:	2201      	movs	r2, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	429a      	cmp	r2, r3
 800110e:	f040 815a 	bne.w	80013c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b01      	cmp	r3, #1
 800111c:	d005      	beq.n	800112a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001126:	2b02      	cmp	r3, #2
 8001128:	d130      	bne.n	800118c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	2203      	movs	r2, #3
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001160:	2201      	movs	r2, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	091b      	lsrs	r3, r3, #4
 8001176:	f003 0201 	and.w	r2, r3, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b03      	cmp	r3, #3
 8001196:	d017      	beq.n	80011c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d123      	bne.n	800121c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	08da      	lsrs	r2, r3, #3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3208      	adds	r2, #8
 80011dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	220f      	movs	r2, #15
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3208      	adds	r2, #8
 8001216:	69b9      	ldr	r1, [r7, #24]
 8001218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0203 	and.w	r2, r3, #3
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 80b4 	beq.w	80013c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b60      	ldr	r3, [pc, #384]	@ (80013e4 <HAL_GPIO_Init+0x30c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	4a5f      	ldr	r2, [pc, #380]	@ (80013e4 <HAL_GPIO_Init+0x30c>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126c:	6453      	str	r3, [r2, #68]	@ 0x44
 800126e:	4b5d      	ldr	r3, [pc, #372]	@ (80013e4 <HAL_GPIO_Init+0x30c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800127a:	4a5b      	ldr	r2, [pc, #364]	@ (80013e8 <HAL_GPIO_Init+0x310>)
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a52      	ldr	r2, [pc, #328]	@ (80013ec <HAL_GPIO_Init+0x314>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d02b      	beq.n	80012fe <HAL_GPIO_Init+0x226>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a51      	ldr	r2, [pc, #324]	@ (80013f0 <HAL_GPIO_Init+0x318>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d025      	beq.n	80012fa <HAL_GPIO_Init+0x222>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a50      	ldr	r2, [pc, #320]	@ (80013f4 <HAL_GPIO_Init+0x31c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d01f      	beq.n	80012f6 <HAL_GPIO_Init+0x21e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4f      	ldr	r2, [pc, #316]	@ (80013f8 <HAL_GPIO_Init+0x320>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d019      	beq.n	80012f2 <HAL_GPIO_Init+0x21a>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4e      	ldr	r2, [pc, #312]	@ (80013fc <HAL_GPIO_Init+0x324>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d013      	beq.n	80012ee <HAL_GPIO_Init+0x216>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001400 <HAL_GPIO_Init+0x328>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00d      	beq.n	80012ea <HAL_GPIO_Init+0x212>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001404 <HAL_GPIO_Init+0x32c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d007      	beq.n	80012e6 <HAL_GPIO_Init+0x20e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001408 <HAL_GPIO_Init+0x330>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d101      	bne.n	80012e2 <HAL_GPIO_Init+0x20a>
 80012de:	2307      	movs	r3, #7
 80012e0:	e00e      	b.n	8001300 <HAL_GPIO_Init+0x228>
 80012e2:	2308      	movs	r3, #8
 80012e4:	e00c      	b.n	8001300 <HAL_GPIO_Init+0x228>
 80012e6:	2306      	movs	r3, #6
 80012e8:	e00a      	b.n	8001300 <HAL_GPIO_Init+0x228>
 80012ea:	2305      	movs	r3, #5
 80012ec:	e008      	b.n	8001300 <HAL_GPIO_Init+0x228>
 80012ee:	2304      	movs	r3, #4
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x228>
 80012f2:	2303      	movs	r3, #3
 80012f4:	e004      	b.n	8001300 <HAL_GPIO_Init+0x228>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e002      	b.n	8001300 <HAL_GPIO_Init+0x228>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <HAL_GPIO_Init+0x228>
 80012fe:	2300      	movs	r3, #0
 8001300:	69fa      	ldr	r2, [r7, #28]
 8001302:	f002 0203 	and.w	r2, r2, #3
 8001306:	0092      	lsls	r2, r2, #2
 8001308:	4093      	lsls	r3, r2
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001310:	4935      	ldr	r1, [pc, #212]	@ (80013e8 <HAL_GPIO_Init+0x310>)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	3302      	adds	r3, #2
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131e:	4b3b      	ldr	r3, [pc, #236]	@ (800140c <HAL_GPIO_Init+0x334>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001342:	4a32      	ldr	r2, [pc, #200]	@ (800140c <HAL_GPIO_Init+0x334>)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001348:	4b30      	ldr	r3, [pc, #192]	@ (800140c <HAL_GPIO_Init+0x334>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800136c:	4a27      	ldr	r2, [pc, #156]	@ (800140c <HAL_GPIO_Init+0x334>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001372:	4b26      	ldr	r3, [pc, #152]	@ (800140c <HAL_GPIO_Init+0x334>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001396:	4a1d      	ldr	r2, [pc, #116]	@ (800140c <HAL_GPIO_Init+0x334>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800139c:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <HAL_GPIO_Init+0x334>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c0:	4a12      	ldr	r2, [pc, #72]	@ (800140c <HAL_GPIO_Init+0x334>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3301      	adds	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	2b0f      	cmp	r3, #15
 80013d0:	f67f ae90 	bls.w	80010f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3724      	adds	r7, #36	@ 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40013800 	.word	0x40013800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40020c00 	.word	0x40020c00
 80013fc:	40021000 	.word	0x40021000
 8001400:	40021400 	.word	0x40021400
 8001404:	40021800 	.word	0x40021800
 8001408:	40021c00 	.word	0x40021c00
 800140c:	40013c00 	.word	0x40013c00

08001410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001420:	787b      	ldrb	r3, [r7, #1]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800142c:	e003      	b.n	8001436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800142e:	887b      	ldrh	r3, [r7, #2]
 8001430:	041a      	lsls	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	619a      	str	r2, [r3, #24]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e267      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d075      	beq.n	800154e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001462:	4b88      	ldr	r3, [pc, #544]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b04      	cmp	r3, #4
 800146c:	d00c      	beq.n	8001488 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146e:	4b85      	ldr	r3, [pc, #532]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001476:	2b08      	cmp	r3, #8
 8001478:	d112      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800147a:	4b82      	ldr	r3, [pc, #520]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001486:	d10b      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	4b7e      	ldr	r3, [pc, #504]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d05b      	beq.n	800154c <HAL_RCC_OscConfig+0x108>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d157      	bne.n	800154c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e242      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a8:	d106      	bne.n	80014b8 <HAL_RCC_OscConfig+0x74>
 80014aa:	4b76      	ldr	r3, [pc, #472]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a75      	ldr	r2, [pc, #468]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e01d      	b.n	80014f4 <HAL_RCC_OscConfig+0xb0>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x98>
 80014c2:	4b70      	ldr	r3, [pc, #448]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6f      	ldr	r2, [pc, #444]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 80014c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a6c      	ldr	r2, [pc, #432]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 80014d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e00b      	b.n	80014f4 <HAL_RCC_OscConfig+0xb0>
 80014dc:	4b69      	ldr	r3, [pc, #420]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a68      	ldr	r2, [pc, #416]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 80014e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b66      	ldr	r3, [pc, #408]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a65      	ldr	r2, [pc, #404]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 80014ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d013      	beq.n	8001524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fcac 	bl	8000e58 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fca8 	bl	8000e58 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	@ 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e207      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	4b5b      	ldr	r3, [pc, #364]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0xc0>
 8001522:	e014      	b.n	800154e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fc98 	bl	8000e58 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800152c:	f7ff fc94 	bl	8000e58 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b64      	cmp	r3, #100	@ 0x64
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e1f3      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153e:	4b51      	ldr	r3, [pc, #324]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0xe8>
 800154a:	e000      	b.n	800154e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d063      	beq.n	8001622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800155a:	4b4a      	ldr	r3, [pc, #296]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00b      	beq.n	800157e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001566:	4b47      	ldr	r3, [pc, #284]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800156e:	2b08      	cmp	r3, #8
 8001570:	d11c      	bne.n	80015ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001572:	4b44      	ldr	r3, [pc, #272]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d116      	bne.n	80015ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157e:	4b41      	ldr	r3, [pc, #260]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d005      	beq.n	8001596 <HAL_RCC_OscConfig+0x152>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d001      	beq.n	8001596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e1c7      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001596:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4937      	ldr	r1, [pc, #220]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	e03a      	b.n	8001622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d020      	beq.n	80015f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b4:	4b34      	ldr	r3, [pc, #208]	@ (8001688 <HAL_RCC_OscConfig+0x244>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ba:	f7ff fc4d 	bl	8000e58 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c2:	f7ff fc49 	bl	8000e58 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e1a8      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	4b28      	ldr	r3, [pc, #160]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4925      	ldr	r1, [pc, #148]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	600b      	str	r3, [r1, #0]
 80015f4:	e015      	b.n	8001622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f6:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <HAL_RCC_OscConfig+0x244>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff fc2c 	bl	8000e58 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001604:	f7ff fc28 	bl	8000e58 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e187      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001616:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d036      	beq.n	800169c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d016      	beq.n	8001664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <HAL_RCC_OscConfig+0x248>)
 8001638:	2201      	movs	r2, #1
 800163a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7ff fc0c 	bl	8000e58 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff fc08 	bl	8000e58 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e167      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <HAL_RCC_OscConfig+0x240>)
 8001658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x200>
 8001662:	e01b      	b.n	800169c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001664:	4b09      	ldr	r3, [pc, #36]	@ (800168c <HAL_RCC_OscConfig+0x248>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff fbf5 	bl	8000e58 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001670:	e00e      	b.n	8001690 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001672:	f7ff fbf1 	bl	8000e58 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d907      	bls.n	8001690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e150      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
 8001684:	40023800 	.word	0x40023800
 8001688:	42470000 	.word	0x42470000
 800168c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001690:	4b88      	ldr	r3, [pc, #544]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1ea      	bne.n	8001672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 8097 	beq.w	80017d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ae:	4b81      	ldr	r3, [pc, #516]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10f      	bne.n	80016da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b7d      	ldr	r3, [pc, #500]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	4a7c      	ldr	r2, [pc, #496]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	4b7a      	ldr	r3, [pc, #488]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d6:	2301      	movs	r3, #1
 80016d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016da:	4b77      	ldr	r3, [pc, #476]	@ (80018b8 <HAL_RCC_OscConfig+0x474>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d118      	bne.n	8001718 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e6:	4b74      	ldr	r3, [pc, #464]	@ (80018b8 <HAL_RCC_OscConfig+0x474>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a73      	ldr	r2, [pc, #460]	@ (80018b8 <HAL_RCC_OscConfig+0x474>)
 80016ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fbb1 	bl	8000e58 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fa:	f7ff fbad 	bl	8000e58 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e10c      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170c:	4b6a      	ldr	r3, [pc, #424]	@ (80018b8 <HAL_RCC_OscConfig+0x474>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x2ea>
 8001720:	4b64      	ldr	r3, [pc, #400]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001724:	4a63      	ldr	r2, [pc, #396]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6713      	str	r3, [r2, #112]	@ 0x70
 800172c:	e01c      	b.n	8001768 <HAL_RCC_OscConfig+0x324>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b05      	cmp	r3, #5
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x30c>
 8001736:	4b5f      	ldr	r3, [pc, #380]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173a:	4a5e      	ldr	r2, [pc, #376]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	6713      	str	r3, [r2, #112]	@ 0x70
 8001742:	4b5c      	ldr	r3, [pc, #368]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001746:	4a5b      	ldr	r2, [pc, #364]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6713      	str	r3, [r2, #112]	@ 0x70
 800174e:	e00b      	b.n	8001768 <HAL_RCC_OscConfig+0x324>
 8001750:	4b58      	ldr	r3, [pc, #352]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001754:	4a57      	ldr	r2, [pc, #348]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001756:	f023 0301 	bic.w	r3, r3, #1
 800175a:	6713      	str	r3, [r2, #112]	@ 0x70
 800175c:	4b55      	ldr	r3, [pc, #340]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001760:	4a54      	ldr	r2, [pc, #336]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001762:	f023 0304 	bic.w	r3, r3, #4
 8001766:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d015      	beq.n	800179c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001770:	f7ff fb72 	bl	8000e58 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001776:	e00a      	b.n	800178e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001778:	f7ff fb6e 	bl	8000e58 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e0cb      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178e:	4b49      	ldr	r3, [pc, #292]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0ee      	beq.n	8001778 <HAL_RCC_OscConfig+0x334>
 800179a:	e014      	b.n	80017c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179c:	f7ff fb5c 	bl	8000e58 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7ff fb58 	bl	8000e58 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0b5      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ba:	4b3e      	ldr	r3, [pc, #248]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1ee      	bne.n	80017a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017c6:	7dfb      	ldrb	r3, [r7, #23]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d105      	bne.n	80017d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017cc:	4b39      	ldr	r3, [pc, #228]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d0:	4a38      	ldr	r2, [pc, #224]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 80017d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80a1 	beq.w	8001924 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017e2:	4b34      	ldr	r3, [pc, #208]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d05c      	beq.n	80018a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d141      	bne.n	800187a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b31      	ldr	r3, [pc, #196]	@ (80018bc <HAL_RCC_OscConfig+0x478>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fb2c 	bl	8000e58 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff fb28 	bl	8000e58 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e087      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001816:	4b27      	ldr	r3, [pc, #156]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69da      	ldr	r2, [r3, #28]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001830:	019b      	lsls	r3, r3, #6
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	3b01      	subs	r3, #1
 800183c:	041b      	lsls	r3, r3, #16
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001844:	061b      	lsls	r3, r3, #24
 8001846:	491b      	ldr	r1, [pc, #108]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800184c:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <HAL_RCC_OscConfig+0x478>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff fb01 	bl	8000e58 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185a:	f7ff fafd 	bl	8000e58 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e05c      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x416>
 8001878:	e054      	b.n	8001924 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <HAL_RCC_OscConfig+0x478>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff faea 	bl	8000e58 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff fae6 	bl	8000e58 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e045      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_RCC_OscConfig+0x470>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x444>
 80018a6:	e03d      	b.n	8001924 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d107      	bne.n	80018c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e038      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40007000 	.word	0x40007000
 80018bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <HAL_RCC_OscConfig+0x4ec>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d028      	beq.n	8001920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d121      	bne.n	8001920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d11a      	bne.n	8001920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018f0:	4013      	ands	r3, r2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d111      	bne.n	8001920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001906:	085b      	lsrs	r3, r3, #1
 8001908:	3b01      	subs	r3, #1
 800190a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d107      	bne.n	8001920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800

08001934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0cc      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001948:	4b68      	ldr	r3, [pc, #416]	@ (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d90c      	bls.n	8001970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b65      	ldr	r3, [pc, #404]	@ (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b63      	ldr	r3, [pc, #396]	@ (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0b8      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001988:	4b59      	ldr	r3, [pc, #356]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a58      	ldr	r2, [pc, #352]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001992:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a0:	4b53      	ldr	r3, [pc, #332]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a52      	ldr	r2, [pc, #328]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ac:	4b50      	ldr	r3, [pc, #320]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	494d      	ldr	r1, [pc, #308]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d044      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b47      	ldr	r3, [pc, #284]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d119      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e07f      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d003      	beq.n	80019f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	4b3f      	ldr	r3, [pc, #252]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d109      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e06f      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	4b3b      	ldr	r3, [pc, #236]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e067      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a12:	4b37      	ldr	r3, [pc, #220]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f023 0203 	bic.w	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4934      	ldr	r1, [pc, #208]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a24:	f7ff fa18 	bl	8000e58 <HAL_GetTick>
 8001a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2c:	f7ff fa14 	bl	8000e58 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e04f      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	4b2b      	ldr	r3, [pc, #172]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 020c 	and.w	r2, r3, #12
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d1eb      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a54:	4b25      	ldr	r3, [pc, #148]	@ (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d20c      	bcs.n	8001a7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e032      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a88:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4916      	ldr	r1, [pc, #88]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d009      	beq.n	8001aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aa6:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	490e      	ldr	r1, [pc, #56]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aba:	f000 f821 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	490a      	ldr	r1, [pc, #40]	@ (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	5ccb      	ldrb	r3, [r1, r3]
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	4a09      	ldr	r2, [pc, #36]	@ (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <HAL_RCC_ClockConfig+0x1c8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f978 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00
 8001af0:	40023800 	.word	0x40023800
 8001af4:	08002f1c 	.word	0x08002f1c
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000004 	.word	0x20000004

08001b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b04:	b090      	sub	sp, #64	@ 0x40
 8001b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b18:	4b59      	ldr	r3, [pc, #356]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d00d      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x40>
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	f200 80a1 	bhi.w	8001c6c <HAL_RCC_GetSysClockFreq+0x16c>
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x34>
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d003      	beq.n	8001b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b32:	e09b      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b53      	ldr	r3, [pc, #332]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b38:	e09b      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b3a:	4b53      	ldr	r3, [pc, #332]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b3e:	e098      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b40:	4b4f      	ldr	r3, [pc, #316]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b4a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d028      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b56:	4b4a      	ldr	r3, [pc, #296]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	099b      	lsrs	r3, r3, #6
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	623b      	str	r3, [r7, #32]
 8001b60:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4b47      	ldr	r3, [pc, #284]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b6c:	fb03 f201 	mul.w	r2, r3, r1
 8001b70:	2300      	movs	r3, #0
 8001b72:	fb00 f303 	mul.w	r3, r0, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	4a43      	ldr	r2, [pc, #268]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b7a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b80:	460a      	mov	r2, r1
 8001b82:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b86:	4413      	add	r3, r2
 8001b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	61fa      	str	r2, [r7, #28]
 8001b92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b9a:	f7fe fb69 	bl	8000270 <__aeabi_uldivmod>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ba6:	e053      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba8:	4b35      	ldr	r3, [pc, #212]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	2200      	movs	r2, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	617a      	str	r2, [r7, #20]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bba:	f04f 0b00 	mov.w	fp, #0
 8001bbe:	4652      	mov	r2, sl
 8001bc0:	465b      	mov	r3, fp
 8001bc2:	f04f 0000 	mov.w	r0, #0
 8001bc6:	f04f 0100 	mov.w	r1, #0
 8001bca:	0159      	lsls	r1, r3, #5
 8001bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd0:	0150      	lsls	r0, r2, #5
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	ebb2 080a 	subs.w	r8, r2, sl
 8001bda:	eb63 090b 	sbc.w	r9, r3, fp
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bf2:	ebb2 0408 	subs.w	r4, r2, r8
 8001bf6:	eb63 0509 	sbc.w	r5, r3, r9
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	00eb      	lsls	r3, r5, #3
 8001c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c08:	00e2      	lsls	r2, r4, #3
 8001c0a:	4614      	mov	r4, r2
 8001c0c:	461d      	mov	r5, r3
 8001c0e:	eb14 030a 	adds.w	r3, r4, sl
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	eb45 030b 	adc.w	r3, r5, fp
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c26:	4629      	mov	r1, r5
 8001c28:	028b      	lsls	r3, r1, #10
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c30:	4621      	mov	r1, r4
 8001c32:	028a      	lsls	r2, r1, #10
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	60fa      	str	r2, [r7, #12]
 8001c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c44:	f7fe fb14 	bl	8000270 <__aeabi_uldivmod>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c6a:	e002      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3740      	adds	r7, #64	@ 0x40
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	00f42400 	.word	0x00f42400
 8001c88:	017d7840 	.word	0x017d7840

08001c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e07b      	b.n	8001d96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d108      	bne.n	8001cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001cae:	d009      	beq.n	8001cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
 8001cb6:	e005      	b.n	8001cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe ff58 	bl	8000b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d48:	ea42 0103 	orr.w	r1, r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d50:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	f003 0104 	and.w	r1, r3, #4
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6a:	f003 0210 	and.w	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	69da      	ldr	r2, [r3, #28]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001db4:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d00c      	beq.n	8001ddc <HAL_SPI_TransmitReceive_IT+0x3c>
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001dc8:	d106      	bne.n	8001dd8 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <HAL_SPI_TransmitReceive_IT+0x38>
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d001      	beq.n	8001ddc <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e061      	b.n	8001ea0 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_SPI_TransmitReceive_IT+0x4e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_SPI_TransmitReceive_IT+0x4e>
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e056      	b.n	8001ea0 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_SPI_TransmitReceive_IT+0x60>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e04f      	b.n	8001ea0 <HAL_SPI_TransmitReceive_IT+0x100>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d003      	beq.n	8001e1c <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2205      	movs	r2, #5
 8001e18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	887a      	ldrh	r2, [r7, #2]
 8001e32:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	887a      	ldrh	r2, [r7, #2]
 8001e3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4a16      	ldr	r2, [pc, #88]	@ (8001eac <HAL_SPI_TransmitReceive_IT+0x10c>)
 8001e52:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4a16      	ldr	r2, [pc, #88]	@ (8001eb0 <HAL_SPI_TransmitReceive_IT+0x110>)
 8001e58:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e5a:	e005      	b.n	8001e68 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4a15      	ldr	r2, [pc, #84]	@ (8001eb4 <HAL_SPI_TransmitReceive_IT+0x114>)
 8001e60:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4a14      	ldr	r2, [pc, #80]	@ (8001eb8 <HAL_SPI_TransmitReceive_IT+0x118>)
 8001e66:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e72:	2b40      	cmp	r3, #64	@ 0x40
 8001e74:	d007      	beq.n	8001e86 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8001e9c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	371c      	adds	r7, #28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	080021bd 	.word	0x080021bd
 8001eb0:	0800221d 	.word	0x0800221d
 8001eb4:	080020f9 	.word	0x080020f9
 8001eb8:	0800215d 	.word	0x0800215d

08001ebc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	099b      	lsrs	r3, r3, #6
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10f      	bne.n	8001f00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d004      	beq.n	8001f00 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	4798      	blx	r3
    return;
 8001efe:	e0d7      	b.n	80020b0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	085b      	lsrs	r3, r3, #1
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_SPI_IRQHandler+0x66>
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	09db      	lsrs	r3, r3, #7
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	4798      	blx	r3
    return;
 8001f20:	e0c6      	b.n	80020b0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10c      	bne.n	8001f48 <HAL_SPI_IRQHandler+0x8c>
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	099b      	lsrs	r3, r3, #6
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 80b4 	beq.w	80020b0 <HAL_SPI_IRQHandler+0x1f4>
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80ad 	beq.w	80020b0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	099b      	lsrs	r3, r3, #6
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d023      	beq.n	8001faa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d011      	beq.n	8001f92 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f72:	f043 0204 	orr.w	r2, r3, #4
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	e00b      	b.n	8001faa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]
        return;
 8001fa8:	e082      	b.n	80020b0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	095b      	lsrs	r3, r3, #5
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d014      	beq.n	8001fe0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fba:	f043 0201 	orr.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00c      	beq.n	8002006 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff0:	f043 0208 	orr.w	r2, r3, #8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200a:	2b00      	cmp	r3, #0
 800200c:	d04f      	beq.n	80020ae <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800201c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d104      	bne.n	800203a <HAL_SPI_IRQHandler+0x17e>
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d034      	beq.n	80020a4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0203 	bic.w	r2, r2, #3
 8002048:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204e:	2b00      	cmp	r3, #0
 8002050:	d011      	beq.n	8002076 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002056:	4a18      	ldr	r2, [pc, #96]	@ (80020b8 <HAL_SPI_IRQHandler+0x1fc>)
 8002058:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff f817 	bl	8001092 <HAL_DMA_Abort_IT>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002082:	4a0d      	ldr	r2, [pc, #52]	@ (80020b8 <HAL_SPI_IRQHandler+0x1fc>)
 8002084:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f801 	bl	8001092 <HAL_DMA_Abort_IT>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80020a2:	e003      	b.n	80020ac <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7fe fd1f 	bl	8000ae8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80020aa:	e000      	b.n	80020ae <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80020ac:	bf00      	nop
    return;
 80020ae:	bf00      	nop
  }
}
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	080020d1 	.word	0x080020d1

080020bc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7fe fcfc 	bl	8000ae8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f103 020c 	add.w	r2, r3, #12
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800210c:	7812      	ldrb	r2, [r2, #0]
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10f      	bne.n	8002154 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002142:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f970 	bl	8002434 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	330c      	adds	r3, #12
 800216e:	7812      	ldrb	r2, [r2, #0]
 8002170:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002180:	b29b      	uxth	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10f      	bne.n	80021b4 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021a2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d102      	bne.n	80021b4 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f940 	bl	8002434 <SPI_CloseRxTx_ISR>
    }
  }
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ce:	b292      	uxth	r2, r2
 80021d0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d6:	1c9a      	adds	r2, r3, #2
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10f      	bne.n	8002214 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002202:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d102      	bne.n	8002214 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f910 	bl	8002434 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002228:	881a      	ldrh	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	1c9a      	adds	r2, r3, #2
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800224c:	b29b      	uxth	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10f      	bne.n	8002272 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002260:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002266:	b29b      	uxth	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f8e1 	bl	8002434 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	4613      	mov	r3, r2
 800228a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800228c:	f7fe fde4 	bl	8000e58 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	4413      	add	r3, r2
 800229a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800229c:	f7fe fddc 	bl	8000e58 <HAL_GetTick>
 80022a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022a2:	4b39      	ldr	r3, [pc, #228]	@ (8002388 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	015b      	lsls	r3, r3, #5
 80022a8:	0d1b      	lsrs	r3, r3, #20
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	fb02 f303 	mul.w	r3, r2, r3
 80022b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022b2:	e055      	b.n	8002360 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ba:	d051      	beq.n	8002360 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022bc:	f7fe fdcc 	bl	8000e58 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d902      	bls.n	80022d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d13d      	bne.n	800234e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80022e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022ea:	d111      	bne.n	8002310 <SPI_WaitFlagStateUntilTimeout+0x94>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022f4:	d004      	beq.n	8002300 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022fe:	d107      	bne.n	8002310 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800230e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002318:	d10f      	bne.n	800233a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002338:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e018      	b.n	8002380 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	e002      	b.n	8002360 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3b01      	subs	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4013      	ands	r3, r2
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	429a      	cmp	r2, r3
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	429a      	cmp	r2, r3
 800237c:	d19a      	bne.n	80022b4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3720      	adds	r7, #32
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000000 	.word	0x20000000

0800238c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2201      	movs	r2, #1
 80023a0:	2102      	movs	r1, #2
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f7ff ff6a 	bl	800227c <SPI_WaitFlagStateUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b2:	f043 0220 	orr.w	r2, r3, #32
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e032      	b.n	8002424 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80023be:	4b1b      	ldr	r3, [pc, #108]	@ (800242c <SPI_EndRxTxTransaction+0xa0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002430 <SPI_EndRxTxTransaction+0xa4>)
 80023c4:	fba2 2303 	umull	r2, r3, r2, r3
 80023c8:	0d5b      	lsrs	r3, r3, #21
 80023ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023dc:	d112      	bne.n	8002404 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2200      	movs	r2, #0
 80023e6:	2180      	movs	r1, #128	@ 0x80
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f7ff ff47 	bl	800227c <SPI_WaitFlagStateUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d016      	beq.n	8002422 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e00f      	b.n	8002424 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3b01      	subs	r3, #1
 800240e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800241a:	2b80      	cmp	r3, #128	@ 0x80
 800241c:	d0f2      	beq.n	8002404 <SPI_EndRxTxTransaction+0x78>
 800241e:	e000      	b.n	8002422 <SPI_EndRxTxTransaction+0x96>
        break;
 8002420:	bf00      	nop
  }

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000000 	.word	0x20000000
 8002430:	165e9f81 	.word	0x165e9f81

08002434 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800243c:	4b35      	ldr	r3, [pc, #212]	@ (8002514 <SPI_CloseRxTx_ISR+0xe0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a35      	ldr	r2, [pc, #212]	@ (8002518 <SPI_CloseRxTx_ISR+0xe4>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0a5b      	lsrs	r3, r3, #9
 8002448:	2264      	movs	r2, #100	@ 0x64
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002450:	f7fe fd02 	bl	8000e58 <HAL_GetTick>
 8002454:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0220 	bic.w	r2, r2, #32
 8002464:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d106      	bne.n	800247a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002478:	e009      	b.n	800248e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	3b01      	subs	r3, #1
 800247e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0eb      	beq.n	8002466 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	2164      	movs	r1, #100	@ 0x64
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ff7a 	bl	800238c <SPI_EndRxTxTransaction>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a2:	f043 0220 	orr.w	r2, r3, #32
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10a      	bne.n	80024c8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d115      	bne.n	80024fc <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d107      	bne.n	80024ec <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff fde9 	bl	80020bc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80024ea:	e00e      	b.n	800250a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7fe fab5 	bl	8000a64 <HAL_SPI_TxRxCpltCallback>
}
 80024fa:	e006      	b.n	800250a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7fe faef 	bl	8000ae8 <HAL_SPI_ErrorCallback>
}
 800250a:	bf00      	nop
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000000 	.word	0x20000000
 8002518:	057619f1 	.word	0x057619f1

0800251c <sniprintf>:
 800251c:	b40c      	push	{r2, r3}
 800251e:	b530      	push	{r4, r5, lr}
 8002520:	4b18      	ldr	r3, [pc, #96]	@ (8002584 <sniprintf+0x68>)
 8002522:	1e0c      	subs	r4, r1, #0
 8002524:	681d      	ldr	r5, [r3, #0]
 8002526:	b09d      	sub	sp, #116	@ 0x74
 8002528:	da08      	bge.n	800253c <sniprintf+0x20>
 800252a:	238b      	movs	r3, #139	@ 0x8b
 800252c:	602b      	str	r3, [r5, #0]
 800252e:	f04f 30ff 	mov.w	r0, #4294967295
 8002532:	b01d      	add	sp, #116	@ 0x74
 8002534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002538:	b002      	add	sp, #8
 800253a:	4770      	bx	lr
 800253c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002540:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	931b      	str	r3, [sp, #108]	@ 0x6c
 800254a:	bf14      	ite	ne
 800254c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002550:	4623      	moveq	r3, r4
 8002552:	9304      	str	r3, [sp, #16]
 8002554:	9307      	str	r3, [sp, #28]
 8002556:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800255a:	9002      	str	r0, [sp, #8]
 800255c:	9006      	str	r0, [sp, #24]
 800255e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002562:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002564:	ab21      	add	r3, sp, #132	@ 0x84
 8002566:	a902      	add	r1, sp, #8
 8002568:	4628      	mov	r0, r5
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	f000 f9ba 	bl	80028e4 <_svfiprintf_r>
 8002570:	1c43      	adds	r3, r0, #1
 8002572:	bfbc      	itt	lt
 8002574:	238b      	movlt	r3, #139	@ 0x8b
 8002576:	602b      	strlt	r3, [r5, #0]
 8002578:	2c00      	cmp	r4, #0
 800257a:	d0da      	beq.n	8002532 <sniprintf+0x16>
 800257c:	9b02      	ldr	r3, [sp, #8]
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
 8002582:	e7d6      	b.n	8002532 <sniprintf+0x16>
 8002584:	2000000c 	.word	0x2000000c

08002588 <memset>:
 8002588:	4402      	add	r2, r0
 800258a:	4603      	mov	r3, r0
 800258c:	4293      	cmp	r3, r2
 800258e:	d100      	bne.n	8002592 <memset+0xa>
 8002590:	4770      	bx	lr
 8002592:	f803 1b01 	strb.w	r1, [r3], #1
 8002596:	e7f9      	b.n	800258c <memset+0x4>

08002598 <strncmp>:
 8002598:	b510      	push	{r4, lr}
 800259a:	b16a      	cbz	r2, 80025b8 <strncmp+0x20>
 800259c:	3901      	subs	r1, #1
 800259e:	1884      	adds	r4, r0, r2
 80025a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d103      	bne.n	80025b4 <strncmp+0x1c>
 80025ac:	42a0      	cmp	r0, r4
 80025ae:	d001      	beq.n	80025b4 <strncmp+0x1c>
 80025b0:	2a00      	cmp	r2, #0
 80025b2:	d1f5      	bne.n	80025a0 <strncmp+0x8>
 80025b4:	1ad0      	subs	r0, r2, r3
 80025b6:	bd10      	pop	{r4, pc}
 80025b8:	4610      	mov	r0, r2
 80025ba:	e7fc      	b.n	80025b6 <strncmp+0x1e>

080025bc <strncpy>:
 80025bc:	b510      	push	{r4, lr}
 80025be:	3901      	subs	r1, #1
 80025c0:	4603      	mov	r3, r0
 80025c2:	b132      	cbz	r2, 80025d2 <strncpy+0x16>
 80025c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80025c8:	f803 4b01 	strb.w	r4, [r3], #1
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2c00      	cmp	r4, #0
 80025d0:	d1f7      	bne.n	80025c2 <strncpy+0x6>
 80025d2:	441a      	add	r2, r3
 80025d4:	2100      	movs	r1, #0
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d100      	bne.n	80025dc <strncpy+0x20>
 80025da:	bd10      	pop	{r4, pc}
 80025dc:	f803 1b01 	strb.w	r1, [r3], #1
 80025e0:	e7f9      	b.n	80025d6 <strncpy+0x1a>
	...

080025e4 <__errno>:
 80025e4:	4b01      	ldr	r3, [pc, #4]	@ (80025ec <__errno+0x8>)
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	2000000c 	.word	0x2000000c

080025f0 <__libc_init_array>:
 80025f0:	b570      	push	{r4, r5, r6, lr}
 80025f2:	4d0d      	ldr	r5, [pc, #52]	@ (8002628 <__libc_init_array+0x38>)
 80025f4:	4c0d      	ldr	r4, [pc, #52]	@ (800262c <__libc_init_array+0x3c>)
 80025f6:	1b64      	subs	r4, r4, r5
 80025f8:	10a4      	asrs	r4, r4, #2
 80025fa:	2600      	movs	r6, #0
 80025fc:	42a6      	cmp	r6, r4
 80025fe:	d109      	bne.n	8002614 <__libc_init_array+0x24>
 8002600:	4d0b      	ldr	r5, [pc, #44]	@ (8002630 <__libc_init_array+0x40>)
 8002602:	4c0c      	ldr	r4, [pc, #48]	@ (8002634 <__libc_init_array+0x44>)
 8002604:	f000 fc64 	bl	8002ed0 <_init>
 8002608:	1b64      	subs	r4, r4, r5
 800260a:	10a4      	asrs	r4, r4, #2
 800260c:	2600      	movs	r6, #0
 800260e:	42a6      	cmp	r6, r4
 8002610:	d105      	bne.n	800261e <__libc_init_array+0x2e>
 8002612:	bd70      	pop	{r4, r5, r6, pc}
 8002614:	f855 3b04 	ldr.w	r3, [r5], #4
 8002618:	4798      	blx	r3
 800261a:	3601      	adds	r6, #1
 800261c:	e7ee      	b.n	80025fc <__libc_init_array+0xc>
 800261e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002622:	4798      	blx	r3
 8002624:	3601      	adds	r6, #1
 8002626:	e7f2      	b.n	800260e <__libc_init_array+0x1e>
 8002628:	08002f68 	.word	0x08002f68
 800262c:	08002f68 	.word	0x08002f68
 8002630:	08002f68 	.word	0x08002f68
 8002634:	08002f6c 	.word	0x08002f6c

08002638 <__retarget_lock_acquire_recursive>:
 8002638:	4770      	bx	lr

0800263a <__retarget_lock_release_recursive>:
 800263a:	4770      	bx	lr

0800263c <_free_r>:
 800263c:	b538      	push	{r3, r4, r5, lr}
 800263e:	4605      	mov	r5, r0
 8002640:	2900      	cmp	r1, #0
 8002642:	d041      	beq.n	80026c8 <_free_r+0x8c>
 8002644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002648:	1f0c      	subs	r4, r1, #4
 800264a:	2b00      	cmp	r3, #0
 800264c:	bfb8      	it	lt
 800264e:	18e4      	addlt	r4, r4, r3
 8002650:	f000 f8e0 	bl	8002814 <__malloc_lock>
 8002654:	4a1d      	ldr	r2, [pc, #116]	@ (80026cc <_free_r+0x90>)
 8002656:	6813      	ldr	r3, [r2, #0]
 8002658:	b933      	cbnz	r3, 8002668 <_free_r+0x2c>
 800265a:	6063      	str	r3, [r4, #4]
 800265c:	6014      	str	r4, [r2, #0]
 800265e:	4628      	mov	r0, r5
 8002660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002664:	f000 b8dc 	b.w	8002820 <__malloc_unlock>
 8002668:	42a3      	cmp	r3, r4
 800266a:	d908      	bls.n	800267e <_free_r+0x42>
 800266c:	6820      	ldr	r0, [r4, #0]
 800266e:	1821      	adds	r1, r4, r0
 8002670:	428b      	cmp	r3, r1
 8002672:	bf01      	itttt	eq
 8002674:	6819      	ldreq	r1, [r3, #0]
 8002676:	685b      	ldreq	r3, [r3, #4]
 8002678:	1809      	addeq	r1, r1, r0
 800267a:	6021      	streq	r1, [r4, #0]
 800267c:	e7ed      	b.n	800265a <_free_r+0x1e>
 800267e:	461a      	mov	r2, r3
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	b10b      	cbz	r3, 8002688 <_free_r+0x4c>
 8002684:	42a3      	cmp	r3, r4
 8002686:	d9fa      	bls.n	800267e <_free_r+0x42>
 8002688:	6811      	ldr	r1, [r2, #0]
 800268a:	1850      	adds	r0, r2, r1
 800268c:	42a0      	cmp	r0, r4
 800268e:	d10b      	bne.n	80026a8 <_free_r+0x6c>
 8002690:	6820      	ldr	r0, [r4, #0]
 8002692:	4401      	add	r1, r0
 8002694:	1850      	adds	r0, r2, r1
 8002696:	4283      	cmp	r3, r0
 8002698:	6011      	str	r1, [r2, #0]
 800269a:	d1e0      	bne.n	800265e <_free_r+0x22>
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	6053      	str	r3, [r2, #4]
 80026a2:	4408      	add	r0, r1
 80026a4:	6010      	str	r0, [r2, #0]
 80026a6:	e7da      	b.n	800265e <_free_r+0x22>
 80026a8:	d902      	bls.n	80026b0 <_free_r+0x74>
 80026aa:	230c      	movs	r3, #12
 80026ac:	602b      	str	r3, [r5, #0]
 80026ae:	e7d6      	b.n	800265e <_free_r+0x22>
 80026b0:	6820      	ldr	r0, [r4, #0]
 80026b2:	1821      	adds	r1, r4, r0
 80026b4:	428b      	cmp	r3, r1
 80026b6:	bf04      	itt	eq
 80026b8:	6819      	ldreq	r1, [r3, #0]
 80026ba:	685b      	ldreq	r3, [r3, #4]
 80026bc:	6063      	str	r3, [r4, #4]
 80026be:	bf04      	itt	eq
 80026c0:	1809      	addeq	r1, r1, r0
 80026c2:	6021      	streq	r1, [r4, #0]
 80026c4:	6054      	str	r4, [r2, #4]
 80026c6:	e7ca      	b.n	800265e <_free_r+0x22>
 80026c8:	bd38      	pop	{r3, r4, r5, pc}
 80026ca:	bf00      	nop
 80026cc:	20000260 	.word	0x20000260

080026d0 <sbrk_aligned>:
 80026d0:	b570      	push	{r4, r5, r6, lr}
 80026d2:	4e0f      	ldr	r6, [pc, #60]	@ (8002710 <sbrk_aligned+0x40>)
 80026d4:	460c      	mov	r4, r1
 80026d6:	6831      	ldr	r1, [r6, #0]
 80026d8:	4605      	mov	r5, r0
 80026da:	b911      	cbnz	r1, 80026e2 <sbrk_aligned+0x12>
 80026dc:	f000 fba4 	bl	8002e28 <_sbrk_r>
 80026e0:	6030      	str	r0, [r6, #0]
 80026e2:	4621      	mov	r1, r4
 80026e4:	4628      	mov	r0, r5
 80026e6:	f000 fb9f 	bl	8002e28 <_sbrk_r>
 80026ea:	1c43      	adds	r3, r0, #1
 80026ec:	d103      	bne.n	80026f6 <sbrk_aligned+0x26>
 80026ee:	f04f 34ff 	mov.w	r4, #4294967295
 80026f2:	4620      	mov	r0, r4
 80026f4:	bd70      	pop	{r4, r5, r6, pc}
 80026f6:	1cc4      	adds	r4, r0, #3
 80026f8:	f024 0403 	bic.w	r4, r4, #3
 80026fc:	42a0      	cmp	r0, r4
 80026fe:	d0f8      	beq.n	80026f2 <sbrk_aligned+0x22>
 8002700:	1a21      	subs	r1, r4, r0
 8002702:	4628      	mov	r0, r5
 8002704:	f000 fb90 	bl	8002e28 <_sbrk_r>
 8002708:	3001      	adds	r0, #1
 800270a:	d1f2      	bne.n	80026f2 <sbrk_aligned+0x22>
 800270c:	e7ef      	b.n	80026ee <sbrk_aligned+0x1e>
 800270e:	bf00      	nop
 8002710:	2000025c 	.word	0x2000025c

08002714 <_malloc_r>:
 8002714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002718:	1ccd      	adds	r5, r1, #3
 800271a:	f025 0503 	bic.w	r5, r5, #3
 800271e:	3508      	adds	r5, #8
 8002720:	2d0c      	cmp	r5, #12
 8002722:	bf38      	it	cc
 8002724:	250c      	movcc	r5, #12
 8002726:	2d00      	cmp	r5, #0
 8002728:	4606      	mov	r6, r0
 800272a:	db01      	blt.n	8002730 <_malloc_r+0x1c>
 800272c:	42a9      	cmp	r1, r5
 800272e:	d904      	bls.n	800273a <_malloc_r+0x26>
 8002730:	230c      	movs	r3, #12
 8002732:	6033      	str	r3, [r6, #0]
 8002734:	2000      	movs	r0, #0
 8002736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800273a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002810 <_malloc_r+0xfc>
 800273e:	f000 f869 	bl	8002814 <__malloc_lock>
 8002742:	f8d8 3000 	ldr.w	r3, [r8]
 8002746:	461c      	mov	r4, r3
 8002748:	bb44      	cbnz	r4, 800279c <_malloc_r+0x88>
 800274a:	4629      	mov	r1, r5
 800274c:	4630      	mov	r0, r6
 800274e:	f7ff ffbf 	bl	80026d0 <sbrk_aligned>
 8002752:	1c43      	adds	r3, r0, #1
 8002754:	4604      	mov	r4, r0
 8002756:	d158      	bne.n	800280a <_malloc_r+0xf6>
 8002758:	f8d8 4000 	ldr.w	r4, [r8]
 800275c:	4627      	mov	r7, r4
 800275e:	2f00      	cmp	r7, #0
 8002760:	d143      	bne.n	80027ea <_malloc_r+0xd6>
 8002762:	2c00      	cmp	r4, #0
 8002764:	d04b      	beq.n	80027fe <_malloc_r+0xea>
 8002766:	6823      	ldr	r3, [r4, #0]
 8002768:	4639      	mov	r1, r7
 800276a:	4630      	mov	r0, r6
 800276c:	eb04 0903 	add.w	r9, r4, r3
 8002770:	f000 fb5a 	bl	8002e28 <_sbrk_r>
 8002774:	4581      	cmp	r9, r0
 8002776:	d142      	bne.n	80027fe <_malloc_r+0xea>
 8002778:	6821      	ldr	r1, [r4, #0]
 800277a:	1a6d      	subs	r5, r5, r1
 800277c:	4629      	mov	r1, r5
 800277e:	4630      	mov	r0, r6
 8002780:	f7ff ffa6 	bl	80026d0 <sbrk_aligned>
 8002784:	3001      	adds	r0, #1
 8002786:	d03a      	beq.n	80027fe <_malloc_r+0xea>
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	442b      	add	r3, r5
 800278c:	6023      	str	r3, [r4, #0]
 800278e:	f8d8 3000 	ldr.w	r3, [r8]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	bb62      	cbnz	r2, 80027f0 <_malloc_r+0xdc>
 8002796:	f8c8 7000 	str.w	r7, [r8]
 800279a:	e00f      	b.n	80027bc <_malloc_r+0xa8>
 800279c:	6822      	ldr	r2, [r4, #0]
 800279e:	1b52      	subs	r2, r2, r5
 80027a0:	d420      	bmi.n	80027e4 <_malloc_r+0xd0>
 80027a2:	2a0b      	cmp	r2, #11
 80027a4:	d917      	bls.n	80027d6 <_malloc_r+0xc2>
 80027a6:	1961      	adds	r1, r4, r5
 80027a8:	42a3      	cmp	r3, r4
 80027aa:	6025      	str	r5, [r4, #0]
 80027ac:	bf18      	it	ne
 80027ae:	6059      	strne	r1, [r3, #4]
 80027b0:	6863      	ldr	r3, [r4, #4]
 80027b2:	bf08      	it	eq
 80027b4:	f8c8 1000 	streq.w	r1, [r8]
 80027b8:	5162      	str	r2, [r4, r5]
 80027ba:	604b      	str	r3, [r1, #4]
 80027bc:	4630      	mov	r0, r6
 80027be:	f000 f82f 	bl	8002820 <__malloc_unlock>
 80027c2:	f104 000b 	add.w	r0, r4, #11
 80027c6:	1d23      	adds	r3, r4, #4
 80027c8:	f020 0007 	bic.w	r0, r0, #7
 80027cc:	1ac2      	subs	r2, r0, r3
 80027ce:	bf1c      	itt	ne
 80027d0:	1a1b      	subne	r3, r3, r0
 80027d2:	50a3      	strne	r3, [r4, r2]
 80027d4:	e7af      	b.n	8002736 <_malloc_r+0x22>
 80027d6:	6862      	ldr	r2, [r4, #4]
 80027d8:	42a3      	cmp	r3, r4
 80027da:	bf0c      	ite	eq
 80027dc:	f8c8 2000 	streq.w	r2, [r8]
 80027e0:	605a      	strne	r2, [r3, #4]
 80027e2:	e7eb      	b.n	80027bc <_malloc_r+0xa8>
 80027e4:	4623      	mov	r3, r4
 80027e6:	6864      	ldr	r4, [r4, #4]
 80027e8:	e7ae      	b.n	8002748 <_malloc_r+0x34>
 80027ea:	463c      	mov	r4, r7
 80027ec:	687f      	ldr	r7, [r7, #4]
 80027ee:	e7b6      	b.n	800275e <_malloc_r+0x4a>
 80027f0:	461a      	mov	r2, r3
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	42a3      	cmp	r3, r4
 80027f6:	d1fb      	bne.n	80027f0 <_malloc_r+0xdc>
 80027f8:	2300      	movs	r3, #0
 80027fa:	6053      	str	r3, [r2, #4]
 80027fc:	e7de      	b.n	80027bc <_malloc_r+0xa8>
 80027fe:	230c      	movs	r3, #12
 8002800:	6033      	str	r3, [r6, #0]
 8002802:	4630      	mov	r0, r6
 8002804:	f000 f80c 	bl	8002820 <__malloc_unlock>
 8002808:	e794      	b.n	8002734 <_malloc_r+0x20>
 800280a:	6005      	str	r5, [r0, #0]
 800280c:	e7d6      	b.n	80027bc <_malloc_r+0xa8>
 800280e:	bf00      	nop
 8002810:	20000260 	.word	0x20000260

08002814 <__malloc_lock>:
 8002814:	4801      	ldr	r0, [pc, #4]	@ (800281c <__malloc_lock+0x8>)
 8002816:	f7ff bf0f 	b.w	8002638 <__retarget_lock_acquire_recursive>
 800281a:	bf00      	nop
 800281c:	20000258 	.word	0x20000258

08002820 <__malloc_unlock>:
 8002820:	4801      	ldr	r0, [pc, #4]	@ (8002828 <__malloc_unlock+0x8>)
 8002822:	f7ff bf0a 	b.w	800263a <__retarget_lock_release_recursive>
 8002826:	bf00      	nop
 8002828:	20000258 	.word	0x20000258

0800282c <__ssputs_r>:
 800282c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002830:	688e      	ldr	r6, [r1, #8]
 8002832:	461f      	mov	r7, r3
 8002834:	42be      	cmp	r6, r7
 8002836:	680b      	ldr	r3, [r1, #0]
 8002838:	4682      	mov	sl, r0
 800283a:	460c      	mov	r4, r1
 800283c:	4690      	mov	r8, r2
 800283e:	d82d      	bhi.n	800289c <__ssputs_r+0x70>
 8002840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002844:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002848:	d026      	beq.n	8002898 <__ssputs_r+0x6c>
 800284a:	6965      	ldr	r5, [r4, #20]
 800284c:	6909      	ldr	r1, [r1, #16]
 800284e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002852:	eba3 0901 	sub.w	r9, r3, r1
 8002856:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800285a:	1c7b      	adds	r3, r7, #1
 800285c:	444b      	add	r3, r9
 800285e:	106d      	asrs	r5, r5, #1
 8002860:	429d      	cmp	r5, r3
 8002862:	bf38      	it	cc
 8002864:	461d      	movcc	r5, r3
 8002866:	0553      	lsls	r3, r2, #21
 8002868:	d527      	bpl.n	80028ba <__ssputs_r+0x8e>
 800286a:	4629      	mov	r1, r5
 800286c:	f7ff ff52 	bl	8002714 <_malloc_r>
 8002870:	4606      	mov	r6, r0
 8002872:	b360      	cbz	r0, 80028ce <__ssputs_r+0xa2>
 8002874:	6921      	ldr	r1, [r4, #16]
 8002876:	464a      	mov	r2, r9
 8002878:	f000 fae6 	bl	8002e48 <memcpy>
 800287c:	89a3      	ldrh	r3, [r4, #12]
 800287e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002886:	81a3      	strh	r3, [r4, #12]
 8002888:	6126      	str	r6, [r4, #16]
 800288a:	6165      	str	r5, [r4, #20]
 800288c:	444e      	add	r6, r9
 800288e:	eba5 0509 	sub.w	r5, r5, r9
 8002892:	6026      	str	r6, [r4, #0]
 8002894:	60a5      	str	r5, [r4, #8]
 8002896:	463e      	mov	r6, r7
 8002898:	42be      	cmp	r6, r7
 800289a:	d900      	bls.n	800289e <__ssputs_r+0x72>
 800289c:	463e      	mov	r6, r7
 800289e:	6820      	ldr	r0, [r4, #0]
 80028a0:	4632      	mov	r2, r6
 80028a2:	4641      	mov	r1, r8
 80028a4:	f000 faa6 	bl	8002df4 <memmove>
 80028a8:	68a3      	ldr	r3, [r4, #8]
 80028aa:	1b9b      	subs	r3, r3, r6
 80028ac:	60a3      	str	r3, [r4, #8]
 80028ae:	6823      	ldr	r3, [r4, #0]
 80028b0:	4433      	add	r3, r6
 80028b2:	6023      	str	r3, [r4, #0]
 80028b4:	2000      	movs	r0, #0
 80028b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028ba:	462a      	mov	r2, r5
 80028bc:	f000 fad2 	bl	8002e64 <_realloc_r>
 80028c0:	4606      	mov	r6, r0
 80028c2:	2800      	cmp	r0, #0
 80028c4:	d1e0      	bne.n	8002888 <__ssputs_r+0x5c>
 80028c6:	6921      	ldr	r1, [r4, #16]
 80028c8:	4650      	mov	r0, sl
 80028ca:	f7ff feb7 	bl	800263c <_free_r>
 80028ce:	230c      	movs	r3, #12
 80028d0:	f8ca 3000 	str.w	r3, [sl]
 80028d4:	89a3      	ldrh	r3, [r4, #12]
 80028d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028da:	81a3      	strh	r3, [r4, #12]
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	e7e9      	b.n	80028b6 <__ssputs_r+0x8a>
	...

080028e4 <_svfiprintf_r>:
 80028e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e8:	4698      	mov	r8, r3
 80028ea:	898b      	ldrh	r3, [r1, #12]
 80028ec:	061b      	lsls	r3, r3, #24
 80028ee:	b09d      	sub	sp, #116	@ 0x74
 80028f0:	4607      	mov	r7, r0
 80028f2:	460d      	mov	r5, r1
 80028f4:	4614      	mov	r4, r2
 80028f6:	d510      	bpl.n	800291a <_svfiprintf_r+0x36>
 80028f8:	690b      	ldr	r3, [r1, #16]
 80028fa:	b973      	cbnz	r3, 800291a <_svfiprintf_r+0x36>
 80028fc:	2140      	movs	r1, #64	@ 0x40
 80028fe:	f7ff ff09 	bl	8002714 <_malloc_r>
 8002902:	6028      	str	r0, [r5, #0]
 8002904:	6128      	str	r0, [r5, #16]
 8002906:	b930      	cbnz	r0, 8002916 <_svfiprintf_r+0x32>
 8002908:	230c      	movs	r3, #12
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	b01d      	add	sp, #116	@ 0x74
 8002912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002916:	2340      	movs	r3, #64	@ 0x40
 8002918:	616b      	str	r3, [r5, #20]
 800291a:	2300      	movs	r3, #0
 800291c:	9309      	str	r3, [sp, #36]	@ 0x24
 800291e:	2320      	movs	r3, #32
 8002920:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002924:	f8cd 800c 	str.w	r8, [sp, #12]
 8002928:	2330      	movs	r3, #48	@ 0x30
 800292a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002ac8 <_svfiprintf_r+0x1e4>
 800292e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002932:	f04f 0901 	mov.w	r9, #1
 8002936:	4623      	mov	r3, r4
 8002938:	469a      	mov	sl, r3
 800293a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800293e:	b10a      	cbz	r2, 8002944 <_svfiprintf_r+0x60>
 8002940:	2a25      	cmp	r2, #37	@ 0x25
 8002942:	d1f9      	bne.n	8002938 <_svfiprintf_r+0x54>
 8002944:	ebba 0b04 	subs.w	fp, sl, r4
 8002948:	d00b      	beq.n	8002962 <_svfiprintf_r+0x7e>
 800294a:	465b      	mov	r3, fp
 800294c:	4622      	mov	r2, r4
 800294e:	4629      	mov	r1, r5
 8002950:	4638      	mov	r0, r7
 8002952:	f7ff ff6b 	bl	800282c <__ssputs_r>
 8002956:	3001      	adds	r0, #1
 8002958:	f000 80a7 	beq.w	8002aaa <_svfiprintf_r+0x1c6>
 800295c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800295e:	445a      	add	r2, fp
 8002960:	9209      	str	r2, [sp, #36]	@ 0x24
 8002962:	f89a 3000 	ldrb.w	r3, [sl]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 809f 	beq.w	8002aaa <_svfiprintf_r+0x1c6>
 800296c:	2300      	movs	r3, #0
 800296e:	f04f 32ff 	mov.w	r2, #4294967295
 8002972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002976:	f10a 0a01 	add.w	sl, sl, #1
 800297a:	9304      	str	r3, [sp, #16]
 800297c:	9307      	str	r3, [sp, #28]
 800297e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002982:	931a      	str	r3, [sp, #104]	@ 0x68
 8002984:	4654      	mov	r4, sl
 8002986:	2205      	movs	r2, #5
 8002988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800298c:	484e      	ldr	r0, [pc, #312]	@ (8002ac8 <_svfiprintf_r+0x1e4>)
 800298e:	f7fd fc1f 	bl	80001d0 <memchr>
 8002992:	9a04      	ldr	r2, [sp, #16]
 8002994:	b9d8      	cbnz	r0, 80029ce <_svfiprintf_r+0xea>
 8002996:	06d0      	lsls	r0, r2, #27
 8002998:	bf44      	itt	mi
 800299a:	2320      	movmi	r3, #32
 800299c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029a0:	0711      	lsls	r1, r2, #28
 80029a2:	bf44      	itt	mi
 80029a4:	232b      	movmi	r3, #43	@ 0x2b
 80029a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029aa:	f89a 3000 	ldrb.w	r3, [sl]
 80029ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80029b0:	d015      	beq.n	80029de <_svfiprintf_r+0xfa>
 80029b2:	9a07      	ldr	r2, [sp, #28]
 80029b4:	4654      	mov	r4, sl
 80029b6:	2000      	movs	r0, #0
 80029b8:	f04f 0c0a 	mov.w	ip, #10
 80029bc:	4621      	mov	r1, r4
 80029be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029c2:	3b30      	subs	r3, #48	@ 0x30
 80029c4:	2b09      	cmp	r3, #9
 80029c6:	d94b      	bls.n	8002a60 <_svfiprintf_r+0x17c>
 80029c8:	b1b0      	cbz	r0, 80029f8 <_svfiprintf_r+0x114>
 80029ca:	9207      	str	r2, [sp, #28]
 80029cc:	e014      	b.n	80029f8 <_svfiprintf_r+0x114>
 80029ce:	eba0 0308 	sub.w	r3, r0, r8
 80029d2:	fa09 f303 	lsl.w	r3, r9, r3
 80029d6:	4313      	orrs	r3, r2
 80029d8:	9304      	str	r3, [sp, #16]
 80029da:	46a2      	mov	sl, r4
 80029dc:	e7d2      	b.n	8002984 <_svfiprintf_r+0xa0>
 80029de:	9b03      	ldr	r3, [sp, #12]
 80029e0:	1d19      	adds	r1, r3, #4
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	9103      	str	r1, [sp, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	bfbb      	ittet	lt
 80029ea:	425b      	neglt	r3, r3
 80029ec:	f042 0202 	orrlt.w	r2, r2, #2
 80029f0:	9307      	strge	r3, [sp, #28]
 80029f2:	9307      	strlt	r3, [sp, #28]
 80029f4:	bfb8      	it	lt
 80029f6:	9204      	strlt	r2, [sp, #16]
 80029f8:	7823      	ldrb	r3, [r4, #0]
 80029fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80029fc:	d10a      	bne.n	8002a14 <_svfiprintf_r+0x130>
 80029fe:	7863      	ldrb	r3, [r4, #1]
 8002a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a02:	d132      	bne.n	8002a6a <_svfiprintf_r+0x186>
 8002a04:	9b03      	ldr	r3, [sp, #12]
 8002a06:	1d1a      	adds	r2, r3, #4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	9203      	str	r2, [sp, #12]
 8002a0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002a10:	3402      	adds	r4, #2
 8002a12:	9305      	str	r3, [sp, #20]
 8002a14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002ad8 <_svfiprintf_r+0x1f4>
 8002a18:	7821      	ldrb	r1, [r4, #0]
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	4650      	mov	r0, sl
 8002a1e:	f7fd fbd7 	bl	80001d0 <memchr>
 8002a22:	b138      	cbz	r0, 8002a34 <_svfiprintf_r+0x150>
 8002a24:	9b04      	ldr	r3, [sp, #16]
 8002a26:	eba0 000a 	sub.w	r0, r0, sl
 8002a2a:	2240      	movs	r2, #64	@ 0x40
 8002a2c:	4082      	lsls	r2, r0
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	3401      	adds	r4, #1
 8002a32:	9304      	str	r3, [sp, #16]
 8002a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a38:	4824      	ldr	r0, [pc, #144]	@ (8002acc <_svfiprintf_r+0x1e8>)
 8002a3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002a3e:	2206      	movs	r2, #6
 8002a40:	f7fd fbc6 	bl	80001d0 <memchr>
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d036      	beq.n	8002ab6 <_svfiprintf_r+0x1d2>
 8002a48:	4b21      	ldr	r3, [pc, #132]	@ (8002ad0 <_svfiprintf_r+0x1ec>)
 8002a4a:	bb1b      	cbnz	r3, 8002a94 <_svfiprintf_r+0x1b0>
 8002a4c:	9b03      	ldr	r3, [sp, #12]
 8002a4e:	3307      	adds	r3, #7
 8002a50:	f023 0307 	bic.w	r3, r3, #7
 8002a54:	3308      	adds	r3, #8
 8002a56:	9303      	str	r3, [sp, #12]
 8002a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a5a:	4433      	add	r3, r6
 8002a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a5e:	e76a      	b.n	8002936 <_svfiprintf_r+0x52>
 8002a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a64:	460c      	mov	r4, r1
 8002a66:	2001      	movs	r0, #1
 8002a68:	e7a8      	b.n	80029bc <_svfiprintf_r+0xd8>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	3401      	adds	r4, #1
 8002a6e:	9305      	str	r3, [sp, #20]
 8002a70:	4619      	mov	r1, r3
 8002a72:	f04f 0c0a 	mov.w	ip, #10
 8002a76:	4620      	mov	r0, r4
 8002a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a7c:	3a30      	subs	r2, #48	@ 0x30
 8002a7e:	2a09      	cmp	r2, #9
 8002a80:	d903      	bls.n	8002a8a <_svfiprintf_r+0x1a6>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0c6      	beq.n	8002a14 <_svfiprintf_r+0x130>
 8002a86:	9105      	str	r1, [sp, #20]
 8002a88:	e7c4      	b.n	8002a14 <_svfiprintf_r+0x130>
 8002a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a8e:	4604      	mov	r4, r0
 8002a90:	2301      	movs	r3, #1
 8002a92:	e7f0      	b.n	8002a76 <_svfiprintf_r+0x192>
 8002a94:	ab03      	add	r3, sp, #12
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	462a      	mov	r2, r5
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <_svfiprintf_r+0x1f0>)
 8002a9c:	a904      	add	r1, sp, #16
 8002a9e:	4638      	mov	r0, r7
 8002aa0:	f3af 8000 	nop.w
 8002aa4:	1c42      	adds	r2, r0, #1
 8002aa6:	4606      	mov	r6, r0
 8002aa8:	d1d6      	bne.n	8002a58 <_svfiprintf_r+0x174>
 8002aaa:	89ab      	ldrh	r3, [r5, #12]
 8002aac:	065b      	lsls	r3, r3, #25
 8002aae:	f53f af2d 	bmi.w	800290c <_svfiprintf_r+0x28>
 8002ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ab4:	e72c      	b.n	8002910 <_svfiprintf_r+0x2c>
 8002ab6:	ab03      	add	r3, sp, #12
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	462a      	mov	r2, r5
 8002abc:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <_svfiprintf_r+0x1f0>)
 8002abe:	a904      	add	r1, sp, #16
 8002ac0:	4638      	mov	r0, r7
 8002ac2:	f000 f879 	bl	8002bb8 <_printf_i>
 8002ac6:	e7ed      	b.n	8002aa4 <_svfiprintf_r+0x1c0>
 8002ac8:	08002f2c 	.word	0x08002f2c
 8002acc:	08002f36 	.word	0x08002f36
 8002ad0:	00000000 	.word	0x00000000
 8002ad4:	0800282d 	.word	0x0800282d
 8002ad8:	08002f32 	.word	0x08002f32

08002adc <_printf_common>:
 8002adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae0:	4616      	mov	r6, r2
 8002ae2:	4698      	mov	r8, r3
 8002ae4:	688a      	ldr	r2, [r1, #8]
 8002ae6:	690b      	ldr	r3, [r1, #16]
 8002ae8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002aec:	4293      	cmp	r3, r2
 8002aee:	bfb8      	it	lt
 8002af0:	4613      	movlt	r3, r2
 8002af2:	6033      	str	r3, [r6, #0]
 8002af4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002af8:	4607      	mov	r7, r0
 8002afa:	460c      	mov	r4, r1
 8002afc:	b10a      	cbz	r2, 8002b02 <_printf_common+0x26>
 8002afe:	3301      	adds	r3, #1
 8002b00:	6033      	str	r3, [r6, #0]
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	0699      	lsls	r1, r3, #26
 8002b06:	bf42      	ittt	mi
 8002b08:	6833      	ldrmi	r3, [r6, #0]
 8002b0a:	3302      	addmi	r3, #2
 8002b0c:	6033      	strmi	r3, [r6, #0]
 8002b0e:	6825      	ldr	r5, [r4, #0]
 8002b10:	f015 0506 	ands.w	r5, r5, #6
 8002b14:	d106      	bne.n	8002b24 <_printf_common+0x48>
 8002b16:	f104 0a19 	add.w	sl, r4, #25
 8002b1a:	68e3      	ldr	r3, [r4, #12]
 8002b1c:	6832      	ldr	r2, [r6, #0]
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	42ab      	cmp	r3, r5
 8002b22:	dc26      	bgt.n	8002b72 <_printf_common+0x96>
 8002b24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002b28:	6822      	ldr	r2, [r4, #0]
 8002b2a:	3b00      	subs	r3, #0
 8002b2c:	bf18      	it	ne
 8002b2e:	2301      	movne	r3, #1
 8002b30:	0692      	lsls	r2, r2, #26
 8002b32:	d42b      	bmi.n	8002b8c <_printf_common+0xb0>
 8002b34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002b38:	4641      	mov	r1, r8
 8002b3a:	4638      	mov	r0, r7
 8002b3c:	47c8      	blx	r9
 8002b3e:	3001      	adds	r0, #1
 8002b40:	d01e      	beq.n	8002b80 <_printf_common+0xa4>
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	6922      	ldr	r2, [r4, #16]
 8002b46:	f003 0306 	and.w	r3, r3, #6
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf02      	ittt	eq
 8002b4e:	68e5      	ldreq	r5, [r4, #12]
 8002b50:	6833      	ldreq	r3, [r6, #0]
 8002b52:	1aed      	subeq	r5, r5, r3
 8002b54:	68a3      	ldr	r3, [r4, #8]
 8002b56:	bf0c      	ite	eq
 8002b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b5c:	2500      	movne	r5, #0
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	bfc4      	itt	gt
 8002b62:	1a9b      	subgt	r3, r3, r2
 8002b64:	18ed      	addgt	r5, r5, r3
 8002b66:	2600      	movs	r6, #0
 8002b68:	341a      	adds	r4, #26
 8002b6a:	42b5      	cmp	r5, r6
 8002b6c:	d11a      	bne.n	8002ba4 <_printf_common+0xc8>
 8002b6e:	2000      	movs	r0, #0
 8002b70:	e008      	b.n	8002b84 <_printf_common+0xa8>
 8002b72:	2301      	movs	r3, #1
 8002b74:	4652      	mov	r2, sl
 8002b76:	4641      	mov	r1, r8
 8002b78:	4638      	mov	r0, r7
 8002b7a:	47c8      	blx	r9
 8002b7c:	3001      	adds	r0, #1
 8002b7e:	d103      	bne.n	8002b88 <_printf_common+0xac>
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b88:	3501      	adds	r5, #1
 8002b8a:	e7c6      	b.n	8002b1a <_printf_common+0x3e>
 8002b8c:	18e1      	adds	r1, r4, r3
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	2030      	movs	r0, #48	@ 0x30
 8002b92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002b96:	4422      	add	r2, r4
 8002b98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002b9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	e7c7      	b.n	8002b34 <_printf_common+0x58>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	4641      	mov	r1, r8
 8002baa:	4638      	mov	r0, r7
 8002bac:	47c8      	blx	r9
 8002bae:	3001      	adds	r0, #1
 8002bb0:	d0e6      	beq.n	8002b80 <_printf_common+0xa4>
 8002bb2:	3601      	adds	r6, #1
 8002bb4:	e7d9      	b.n	8002b6a <_printf_common+0x8e>
	...

08002bb8 <_printf_i>:
 8002bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bbc:	7e0f      	ldrb	r7, [r1, #24]
 8002bbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002bc0:	2f78      	cmp	r7, #120	@ 0x78
 8002bc2:	4691      	mov	r9, r2
 8002bc4:	4680      	mov	r8, r0
 8002bc6:	460c      	mov	r4, r1
 8002bc8:	469a      	mov	sl, r3
 8002bca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002bce:	d807      	bhi.n	8002be0 <_printf_i+0x28>
 8002bd0:	2f62      	cmp	r7, #98	@ 0x62
 8002bd2:	d80a      	bhi.n	8002bea <_printf_i+0x32>
 8002bd4:	2f00      	cmp	r7, #0
 8002bd6:	f000 80d1 	beq.w	8002d7c <_printf_i+0x1c4>
 8002bda:	2f58      	cmp	r7, #88	@ 0x58
 8002bdc:	f000 80b8 	beq.w	8002d50 <_printf_i+0x198>
 8002be0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002be4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002be8:	e03a      	b.n	8002c60 <_printf_i+0xa8>
 8002bea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002bee:	2b15      	cmp	r3, #21
 8002bf0:	d8f6      	bhi.n	8002be0 <_printf_i+0x28>
 8002bf2:	a101      	add	r1, pc, #4	@ (adr r1, 8002bf8 <_printf_i+0x40>)
 8002bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002bf8:	08002c51 	.word	0x08002c51
 8002bfc:	08002c65 	.word	0x08002c65
 8002c00:	08002be1 	.word	0x08002be1
 8002c04:	08002be1 	.word	0x08002be1
 8002c08:	08002be1 	.word	0x08002be1
 8002c0c:	08002be1 	.word	0x08002be1
 8002c10:	08002c65 	.word	0x08002c65
 8002c14:	08002be1 	.word	0x08002be1
 8002c18:	08002be1 	.word	0x08002be1
 8002c1c:	08002be1 	.word	0x08002be1
 8002c20:	08002be1 	.word	0x08002be1
 8002c24:	08002d63 	.word	0x08002d63
 8002c28:	08002c8f 	.word	0x08002c8f
 8002c2c:	08002d1d 	.word	0x08002d1d
 8002c30:	08002be1 	.word	0x08002be1
 8002c34:	08002be1 	.word	0x08002be1
 8002c38:	08002d85 	.word	0x08002d85
 8002c3c:	08002be1 	.word	0x08002be1
 8002c40:	08002c8f 	.word	0x08002c8f
 8002c44:	08002be1 	.word	0x08002be1
 8002c48:	08002be1 	.word	0x08002be1
 8002c4c:	08002d25 	.word	0x08002d25
 8002c50:	6833      	ldr	r3, [r6, #0]
 8002c52:	1d1a      	adds	r2, r3, #4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6032      	str	r2, [r6, #0]
 8002c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002c60:	2301      	movs	r3, #1
 8002c62:	e09c      	b.n	8002d9e <_printf_i+0x1e6>
 8002c64:	6833      	ldr	r3, [r6, #0]
 8002c66:	6820      	ldr	r0, [r4, #0]
 8002c68:	1d19      	adds	r1, r3, #4
 8002c6a:	6031      	str	r1, [r6, #0]
 8002c6c:	0606      	lsls	r6, r0, #24
 8002c6e:	d501      	bpl.n	8002c74 <_printf_i+0xbc>
 8002c70:	681d      	ldr	r5, [r3, #0]
 8002c72:	e003      	b.n	8002c7c <_printf_i+0xc4>
 8002c74:	0645      	lsls	r5, r0, #25
 8002c76:	d5fb      	bpl.n	8002c70 <_printf_i+0xb8>
 8002c78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002c7c:	2d00      	cmp	r5, #0
 8002c7e:	da03      	bge.n	8002c88 <_printf_i+0xd0>
 8002c80:	232d      	movs	r3, #45	@ 0x2d
 8002c82:	426d      	negs	r5, r5
 8002c84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c88:	4858      	ldr	r0, [pc, #352]	@ (8002dec <_printf_i+0x234>)
 8002c8a:	230a      	movs	r3, #10
 8002c8c:	e011      	b.n	8002cb2 <_printf_i+0xfa>
 8002c8e:	6821      	ldr	r1, [r4, #0]
 8002c90:	6833      	ldr	r3, [r6, #0]
 8002c92:	0608      	lsls	r0, r1, #24
 8002c94:	f853 5b04 	ldr.w	r5, [r3], #4
 8002c98:	d402      	bmi.n	8002ca0 <_printf_i+0xe8>
 8002c9a:	0649      	lsls	r1, r1, #25
 8002c9c:	bf48      	it	mi
 8002c9e:	b2ad      	uxthmi	r5, r5
 8002ca0:	2f6f      	cmp	r7, #111	@ 0x6f
 8002ca2:	4852      	ldr	r0, [pc, #328]	@ (8002dec <_printf_i+0x234>)
 8002ca4:	6033      	str	r3, [r6, #0]
 8002ca6:	bf14      	ite	ne
 8002ca8:	230a      	movne	r3, #10
 8002caa:	2308      	moveq	r3, #8
 8002cac:	2100      	movs	r1, #0
 8002cae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002cb2:	6866      	ldr	r6, [r4, #4]
 8002cb4:	60a6      	str	r6, [r4, #8]
 8002cb6:	2e00      	cmp	r6, #0
 8002cb8:	db05      	blt.n	8002cc6 <_printf_i+0x10e>
 8002cba:	6821      	ldr	r1, [r4, #0]
 8002cbc:	432e      	orrs	r6, r5
 8002cbe:	f021 0104 	bic.w	r1, r1, #4
 8002cc2:	6021      	str	r1, [r4, #0]
 8002cc4:	d04b      	beq.n	8002d5e <_printf_i+0x1a6>
 8002cc6:	4616      	mov	r6, r2
 8002cc8:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ccc:	fb03 5711 	mls	r7, r3, r1, r5
 8002cd0:	5dc7      	ldrb	r7, [r0, r7]
 8002cd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002cd6:	462f      	mov	r7, r5
 8002cd8:	42bb      	cmp	r3, r7
 8002cda:	460d      	mov	r5, r1
 8002cdc:	d9f4      	bls.n	8002cc8 <_printf_i+0x110>
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d10b      	bne.n	8002cfa <_printf_i+0x142>
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	07df      	lsls	r7, r3, #31
 8002ce6:	d508      	bpl.n	8002cfa <_printf_i+0x142>
 8002ce8:	6923      	ldr	r3, [r4, #16]
 8002cea:	6861      	ldr	r1, [r4, #4]
 8002cec:	4299      	cmp	r1, r3
 8002cee:	bfde      	ittt	le
 8002cf0:	2330      	movle	r3, #48	@ 0x30
 8002cf2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002cf6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002cfa:	1b92      	subs	r2, r2, r6
 8002cfc:	6122      	str	r2, [r4, #16]
 8002cfe:	f8cd a000 	str.w	sl, [sp]
 8002d02:	464b      	mov	r3, r9
 8002d04:	aa03      	add	r2, sp, #12
 8002d06:	4621      	mov	r1, r4
 8002d08:	4640      	mov	r0, r8
 8002d0a:	f7ff fee7 	bl	8002adc <_printf_common>
 8002d0e:	3001      	adds	r0, #1
 8002d10:	d14a      	bne.n	8002da8 <_printf_i+0x1f0>
 8002d12:	f04f 30ff 	mov.w	r0, #4294967295
 8002d16:	b004      	add	sp, #16
 8002d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	f043 0320 	orr.w	r3, r3, #32
 8002d22:	6023      	str	r3, [r4, #0]
 8002d24:	4832      	ldr	r0, [pc, #200]	@ (8002df0 <_printf_i+0x238>)
 8002d26:	2778      	movs	r7, #120	@ 0x78
 8002d28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	6831      	ldr	r1, [r6, #0]
 8002d30:	061f      	lsls	r7, r3, #24
 8002d32:	f851 5b04 	ldr.w	r5, [r1], #4
 8002d36:	d402      	bmi.n	8002d3e <_printf_i+0x186>
 8002d38:	065f      	lsls	r7, r3, #25
 8002d3a:	bf48      	it	mi
 8002d3c:	b2ad      	uxthmi	r5, r5
 8002d3e:	6031      	str	r1, [r6, #0]
 8002d40:	07d9      	lsls	r1, r3, #31
 8002d42:	bf44      	itt	mi
 8002d44:	f043 0320 	orrmi.w	r3, r3, #32
 8002d48:	6023      	strmi	r3, [r4, #0]
 8002d4a:	b11d      	cbz	r5, 8002d54 <_printf_i+0x19c>
 8002d4c:	2310      	movs	r3, #16
 8002d4e:	e7ad      	b.n	8002cac <_printf_i+0xf4>
 8002d50:	4826      	ldr	r0, [pc, #152]	@ (8002dec <_printf_i+0x234>)
 8002d52:	e7e9      	b.n	8002d28 <_printf_i+0x170>
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	f023 0320 	bic.w	r3, r3, #32
 8002d5a:	6023      	str	r3, [r4, #0]
 8002d5c:	e7f6      	b.n	8002d4c <_printf_i+0x194>
 8002d5e:	4616      	mov	r6, r2
 8002d60:	e7bd      	b.n	8002cde <_printf_i+0x126>
 8002d62:	6833      	ldr	r3, [r6, #0]
 8002d64:	6825      	ldr	r5, [r4, #0]
 8002d66:	6961      	ldr	r1, [r4, #20]
 8002d68:	1d18      	adds	r0, r3, #4
 8002d6a:	6030      	str	r0, [r6, #0]
 8002d6c:	062e      	lsls	r6, r5, #24
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	d501      	bpl.n	8002d76 <_printf_i+0x1be>
 8002d72:	6019      	str	r1, [r3, #0]
 8002d74:	e002      	b.n	8002d7c <_printf_i+0x1c4>
 8002d76:	0668      	lsls	r0, r5, #25
 8002d78:	d5fb      	bpl.n	8002d72 <_printf_i+0x1ba>
 8002d7a:	8019      	strh	r1, [r3, #0]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	6123      	str	r3, [r4, #16]
 8002d80:	4616      	mov	r6, r2
 8002d82:	e7bc      	b.n	8002cfe <_printf_i+0x146>
 8002d84:	6833      	ldr	r3, [r6, #0]
 8002d86:	1d1a      	adds	r2, r3, #4
 8002d88:	6032      	str	r2, [r6, #0]
 8002d8a:	681e      	ldr	r6, [r3, #0]
 8002d8c:	6862      	ldr	r2, [r4, #4]
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4630      	mov	r0, r6
 8002d92:	f7fd fa1d 	bl	80001d0 <memchr>
 8002d96:	b108      	cbz	r0, 8002d9c <_printf_i+0x1e4>
 8002d98:	1b80      	subs	r0, r0, r6
 8002d9a:	6060      	str	r0, [r4, #4]
 8002d9c:	6863      	ldr	r3, [r4, #4]
 8002d9e:	6123      	str	r3, [r4, #16]
 8002da0:	2300      	movs	r3, #0
 8002da2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002da6:	e7aa      	b.n	8002cfe <_printf_i+0x146>
 8002da8:	6923      	ldr	r3, [r4, #16]
 8002daa:	4632      	mov	r2, r6
 8002dac:	4649      	mov	r1, r9
 8002dae:	4640      	mov	r0, r8
 8002db0:	47d0      	blx	sl
 8002db2:	3001      	adds	r0, #1
 8002db4:	d0ad      	beq.n	8002d12 <_printf_i+0x15a>
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	079b      	lsls	r3, r3, #30
 8002dba:	d413      	bmi.n	8002de4 <_printf_i+0x22c>
 8002dbc:	68e0      	ldr	r0, [r4, #12]
 8002dbe:	9b03      	ldr	r3, [sp, #12]
 8002dc0:	4298      	cmp	r0, r3
 8002dc2:	bfb8      	it	lt
 8002dc4:	4618      	movlt	r0, r3
 8002dc6:	e7a6      	b.n	8002d16 <_printf_i+0x15e>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	4632      	mov	r2, r6
 8002dcc:	4649      	mov	r1, r9
 8002dce:	4640      	mov	r0, r8
 8002dd0:	47d0      	blx	sl
 8002dd2:	3001      	adds	r0, #1
 8002dd4:	d09d      	beq.n	8002d12 <_printf_i+0x15a>
 8002dd6:	3501      	adds	r5, #1
 8002dd8:	68e3      	ldr	r3, [r4, #12]
 8002dda:	9903      	ldr	r1, [sp, #12]
 8002ddc:	1a5b      	subs	r3, r3, r1
 8002dde:	42ab      	cmp	r3, r5
 8002de0:	dcf2      	bgt.n	8002dc8 <_printf_i+0x210>
 8002de2:	e7eb      	b.n	8002dbc <_printf_i+0x204>
 8002de4:	2500      	movs	r5, #0
 8002de6:	f104 0619 	add.w	r6, r4, #25
 8002dea:	e7f5      	b.n	8002dd8 <_printf_i+0x220>
 8002dec:	08002f3d 	.word	0x08002f3d
 8002df0:	08002f4e 	.word	0x08002f4e

08002df4 <memmove>:
 8002df4:	4288      	cmp	r0, r1
 8002df6:	b510      	push	{r4, lr}
 8002df8:	eb01 0402 	add.w	r4, r1, r2
 8002dfc:	d902      	bls.n	8002e04 <memmove+0x10>
 8002dfe:	4284      	cmp	r4, r0
 8002e00:	4623      	mov	r3, r4
 8002e02:	d807      	bhi.n	8002e14 <memmove+0x20>
 8002e04:	1e43      	subs	r3, r0, #1
 8002e06:	42a1      	cmp	r1, r4
 8002e08:	d008      	beq.n	8002e1c <memmove+0x28>
 8002e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e12:	e7f8      	b.n	8002e06 <memmove+0x12>
 8002e14:	4402      	add	r2, r0
 8002e16:	4601      	mov	r1, r0
 8002e18:	428a      	cmp	r2, r1
 8002e1a:	d100      	bne.n	8002e1e <memmove+0x2a>
 8002e1c:	bd10      	pop	{r4, pc}
 8002e1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e26:	e7f7      	b.n	8002e18 <memmove+0x24>

08002e28 <_sbrk_r>:
 8002e28:	b538      	push	{r3, r4, r5, lr}
 8002e2a:	4d06      	ldr	r5, [pc, #24]	@ (8002e44 <_sbrk_r+0x1c>)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	4604      	mov	r4, r0
 8002e30:	4608      	mov	r0, r1
 8002e32:	602b      	str	r3, [r5, #0]
 8002e34:	f7fd ff38 	bl	8000ca8 <_sbrk>
 8002e38:	1c43      	adds	r3, r0, #1
 8002e3a:	d102      	bne.n	8002e42 <_sbrk_r+0x1a>
 8002e3c:	682b      	ldr	r3, [r5, #0]
 8002e3e:	b103      	cbz	r3, 8002e42 <_sbrk_r+0x1a>
 8002e40:	6023      	str	r3, [r4, #0]
 8002e42:	bd38      	pop	{r3, r4, r5, pc}
 8002e44:	20000254 	.word	0x20000254

08002e48 <memcpy>:
 8002e48:	440a      	add	r2, r1
 8002e4a:	4291      	cmp	r1, r2
 8002e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e50:	d100      	bne.n	8002e54 <memcpy+0xc>
 8002e52:	4770      	bx	lr
 8002e54:	b510      	push	{r4, lr}
 8002e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e5e:	4291      	cmp	r1, r2
 8002e60:	d1f9      	bne.n	8002e56 <memcpy+0xe>
 8002e62:	bd10      	pop	{r4, pc}

08002e64 <_realloc_r>:
 8002e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e68:	4607      	mov	r7, r0
 8002e6a:	4614      	mov	r4, r2
 8002e6c:	460d      	mov	r5, r1
 8002e6e:	b921      	cbnz	r1, 8002e7a <_realloc_r+0x16>
 8002e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e74:	4611      	mov	r1, r2
 8002e76:	f7ff bc4d 	b.w	8002714 <_malloc_r>
 8002e7a:	b92a      	cbnz	r2, 8002e88 <_realloc_r+0x24>
 8002e7c:	f7ff fbde 	bl	800263c <_free_r>
 8002e80:	4625      	mov	r5, r4
 8002e82:	4628      	mov	r0, r5
 8002e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e88:	f000 f81a 	bl	8002ec0 <_malloc_usable_size_r>
 8002e8c:	4284      	cmp	r4, r0
 8002e8e:	4606      	mov	r6, r0
 8002e90:	d802      	bhi.n	8002e98 <_realloc_r+0x34>
 8002e92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002e96:	d8f4      	bhi.n	8002e82 <_realloc_r+0x1e>
 8002e98:	4621      	mov	r1, r4
 8002e9a:	4638      	mov	r0, r7
 8002e9c:	f7ff fc3a 	bl	8002714 <_malloc_r>
 8002ea0:	4680      	mov	r8, r0
 8002ea2:	b908      	cbnz	r0, 8002ea8 <_realloc_r+0x44>
 8002ea4:	4645      	mov	r5, r8
 8002ea6:	e7ec      	b.n	8002e82 <_realloc_r+0x1e>
 8002ea8:	42b4      	cmp	r4, r6
 8002eaa:	4622      	mov	r2, r4
 8002eac:	4629      	mov	r1, r5
 8002eae:	bf28      	it	cs
 8002eb0:	4632      	movcs	r2, r6
 8002eb2:	f7ff ffc9 	bl	8002e48 <memcpy>
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	4638      	mov	r0, r7
 8002eba:	f7ff fbbf 	bl	800263c <_free_r>
 8002ebe:	e7f1      	b.n	8002ea4 <_realloc_r+0x40>

08002ec0 <_malloc_usable_size_r>:
 8002ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ec4:	1f18      	subs	r0, r3, #4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bfbc      	itt	lt
 8002eca:	580b      	ldrlt	r3, [r1, r0]
 8002ecc:	18c0      	addlt	r0, r0, r3
 8002ece:	4770      	bx	lr

08002ed0 <_init>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	bf00      	nop
 8002ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed6:	bc08      	pop	{r3}
 8002ed8:	469e      	mov	lr, r3
 8002eda:	4770      	bx	lr

08002edc <_fini>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	bf00      	nop
 8002ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee2:	bc08      	pop	{r3}
 8002ee4:	469e      	mov	lr, r3
 8002ee6:	4770      	bx	lr
